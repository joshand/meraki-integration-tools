{"version":3,"sources":["webpack://GridStack/webpack/universalModuleDefinition","webpack://GridStack/./src/dd-base-impl.ts","webpack://GridStack/./src/dd-draggable.ts","webpack://GridStack/./src/dd-droppable.ts","webpack://GridStack/./src/dd-element.ts","webpack://GridStack/./src/dd-gridstack.ts","webpack://GridStack/./src/dd-manager.ts","webpack://GridStack/./src/dd-resizable-handle.ts","webpack://GridStack/./src/dd-resizable.ts","webpack://GridStack/./src/dd-touch.ts","webpack://GridStack/./src/gridstack-engine.ts","webpack://GridStack/./src/gridstack.ts","webpack://GridStack/./src/utils.ts","webpack://GridStack/webpack/bootstrap","webpack://GridStack/webpack/startup"],"names":["root","factory","exports","module","define","amd","self","_eventRegister","this","_disabled","on","event","callback","off","enable","disable","destroy","triggerEvent","eventName","disabled","DDBaseImplement","el","option","className","handle","substring","dragEl","classList","contains","querySelector","_mouseDown","bind","_mouseMove","_mouseUp","addEventListener","isTouch","touchstart","pointerdown","remove","add","forDestroy","removeEventListener","dragging","mouseDownEvent","helper","updateOption","opts","Object","keys","forEach","key","e","DDManager","mouseHandled","button","target","parentElement","dragElement","dropElement","document","touchmove","touchend","preventDefault","s","_dragFollow","ev","Utils","initEvent","type","drag","ui","Math","abs","x","y","grid","gridstackNode","ddElement","ddDroppable","_createHelper","_setupHelperContainmentStyle","dragOffset","_getDragOffset","helperContainment","_setupHelperStyle","start","style","position","parentOriginStylePosition","_removeHelperStyle","stop","drop","cloneNode","body","appendTo","parentNode","dragElementOriginStyle","DDDraggable","originStyleProp","map","prop","pointerEvents","width","height","willChange","transition","setTimeout","node","_isAboutToRemove","offset","left","clientX","offsetLeft","top","clientY","offsetTop","window","getComputedStyle","match","parent","xformOffsetX","xformOffsetY","testEl","createElement","addElStyles","opacity","zIndex","appendChild","testElPosition","getBoundingClientRect","removeChild","targetOffset","containmentRect","_mouseEnter","_mouseLeave","_setupAccept","pointerenter","pointerleave","_canDrop","stopPropagation","over","_ui","out","parentDrop","accept","matches","draggable","DDDroppable","init","DDElement","ddDraggable","indexOf","ddResizable","setupDraggable","cleanDraggable","setupResizable","DDResizable","cleanResizable","setupDroppable","cleanDroppable","get","dd","resizable","value","_getDDElements","dEl","handles","getAttribute","autoHide","alwaysShowResizeHandle","resize","dragIn","droppable","_accept","isDroppable","isDraggable","isResizable","name","els","create","hosts","getElements","length","list","filter","d","DDGridStack","_itemRemoving","undefined","GridStack","prototype","_setupAcceptWidget","cellHeight","cellWidth","staticGrid","acceptWidgets","removable","onDrag","_temporaryRemoved","max","round","autoPosition","engine","nodeBoundFix","willItFit","_willFitPos","copyPos","_onStartMoving","_dragOrResize","subGrid","canAccept","selector","maxRow","n","w","h","minW","minH","_leave","getCellHeight","_readAttr","_isExternal","offsetWidth","offsetHeight","_gridstackNodeOrig","cleanupNode","_initDD","wasAdded","placeholder","origNode","oGrid","removedNodes","push","_triggerRemoveEvent","_removeDD","removePositioningStyles","_writeAttr","_updateContainerHeight","addedNodes","_triggerAddEvent","_triggerChangeEvent","endUpdate","_gsEventHandler","_prepareDragDropByNode","removeNode","_setupRemoveDrop","trashEl","removableOptions","setupDragIn","_dragIn","_dragInOptions","dragInOptions","noMove","disableDrag","noResize","disableResize","onStartMoving","dragOrResize","onEndMoving","_moving","_lastTried","gridToNotify","_orig","_writePosAttr","addNode","_extraDragRow","cleanNodes","beginUpdate","_lastUiPosition","_prevYPix","cacheRects","marginTop","marginRight","marginBottom","marginLeft","maxW","maxH","restoreInitial","resizing","p","mLeft","mRight","mTop","mBottom","mHeight","mWidth","min","distance","updateScrollPosition","prev","collide","row","getRow","extra","updateScrollResize","size","rect","moveNodeCheck","_skipDown","onParentResize","movable","val","enableMove","enableResize","_triggerEvent","doEnable","nodes","host","direction","moving","dir","_init","DDResizableHandle","prefix","userSelect","newRect","originalRect","scrolled","temporalRect","_mouseOver","_mouseOut","_setupAutoHide","_setupHandlers","_removeHandlers","updateHandles","updateAutoHide","auto","overResizeElement","handlerDirection","handlers","split","trim","_resizeStart","_resizeStop","move","_resizing","scrollEl","getScrollElement","scrollY","scrollTop","startEvent","_setupHelper","_applyChange","_getChange","_cleanHelper","elOriginStyleVal","_originStyleProp","i","oEvent","offsetX","offsetY","constrain","_constrainSize","oWidth","oHeight","maxWidth","Number","MAX_SAFE_INTEGER","minWidth","maxHeight","minHeight","DocumentTouch","navigator","maxTouchPoints","msMaxTouchPoints","simulateMouseEvent","simulatedType","touches","cancelable","touch","changedTouches","simulatedEvent","createEvent","initMouseEvent","screenX","screenY","dispatchEvent","simulatePointerMouseEvent","DDTouch","touchHandled","pointerLeaveTimeout","clearTimeout","wasDragging","releasePointerCapture","pointerId","column","_float","float","onChange","batchUpdate","flag","batchMode","_prevFloat","saveInitial","_packNodes","_notify","_useEntireRowArea","nn","_hasLocked","_fixCollisions","opt","sortNodes","nested","swap","area","skip","didMove","newOpt","pack","moved","locked","moveNode","skip2","find","isIntercepted","collideAll","collideCoverage","o","collides","_rect","r0","r","r2","yOver","MAX_VALUE","xOver","overMax","right","bottom","a","b","_doSwap","_dirty","touching","isTouching","t","isAreaEmpty","compact","copyNodes","sort","_updating","newY","prepareNode","_id","GridStackEngine","_idSeq","defaults","isNaN","before","_inColumnResize","cacheOneLayout","samePos","getDirtyNodes","verify","dirtyNodes","concat","some","triggerAddEvent","dup","_removeDOM","floor","box","removeDOM","removeAll","_layouts","clonedNode","changedPosConstrain","clone","canMove","c","content","prevPos","needToMove","reduce","save","saveElement","len","layout","wl","l","layoutsNodesChange","updateNodeWidths","prevColumn","cacheLayout","newNodes","domOrder","cacheNodes","lastIndex","cacheNode","j","findIndex","splice","clear","copy","index","GridDefaults","minRow","itemClass","placeholderClass","placeholderText","handleClass","styleInHead","cellHeightThrottle","margin","oneColumnSize","animate","rtl","marginUnit","cellHeightUnit","disableOneColumnMode","oneColumnModeDomSort","rowAttr","toNumber","anyOpts","_alwaysShowResizeHandle","cloneDeep","toBool","_styleSheetClass","random","toFixed","_initMargin","_widthOrContainer","_prevColumn","getColumn","parentGridItemEl","closestByClass","_isNested","_isAutoCellHeight","_setStaticClass","engineClass","cbNodes","_updateStyles","getGridItems","parseInt","_prepareElement","setAnimation","_updateWindowResizeEvent","options","elOrString","getGridElement","gridstack","console","error","initAll","grids","getGridElements","addGrid","doc","implementation","createHTMLDocument","innerHTML","class","children","load","registerEngine","_placeholder","placeholderChild","addWidget","arguments","warn","id","isGridStackWidget","domAttr","_insertNotAppend","prepend","autoColumn","ops","_autoColumn","saveContent","saveGridOpt","sub","origShow","removeInternalAndSame","addAndRemove","items","_ignoreLayoutsNodeChange","removed","removeWidget","item","update","forcePixel","rows","marginDiff","data","parseHeight","unit","clientWidth","innerWidth","domNodes","oldColumn","Array","from","setStatic","_removeStylesheet","removeAttribute","getFloat","getCellFromPixel","useDocRelative","containerPos","documentElement","relativeLeft","relativeTop","columnWidth","rowHeight","makeWidget","getElement","noData","detail","log","doAnimate","updateClass","m","k","changed","ddChanged","getMargin","elements","CustomEvent","bubbles","Event","_styles","removeStylesheet","forceUpdate","styleLocation","createStylesheet","_max","addCSSRule","getHeight","setAttribute","String","removeProperty","same","attrs","resizeHandles","hasOwnProperty","classes","changedColumn","oneColumn","_cellHeightThrottle","throttle","forceRemove","workTodo","_windowResizeBind","margins","commit","obsolete","Engine","GDRev","f","oldName","newName","rev","wrapper","apply","args","info","oldAttr","querySelectorAll","getElementById","col","styleSheet","cssText","createTextNode","insertBefore","firstChild","getElementsByTagName","sheet","rules","addRule","insertRule","v","toLowerCase","Boolean","Error","parseFloat","sources","source","doMinMax","func","delay","isWaiting","scrollingElement","test","overflow","overflowY","innerHeightOrClientHeight","innerHeight","clientHeight","offsetDiffDown","offsetDiffUp","prevScroll","pointerPosY","scrollBy","behavior","obj","skipFields","ret","styles","isArray","evt","which","buttons","dataTransfer","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call"],"mappings":"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","file":"gridstack-all.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"GridStack\"] = factory();\n\telse\n\t\troot[\"GridStack\"] = factory();\n})(self, function() {\nreturn ","/**\n * dd-base-impl.ts 6.0.1\n * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license\n */\n\nexport type EventCallback = (event: Event) => boolean|void;\nexport abstract class DDBaseImplement {\n  /** returns the enable state, but you have to call enable()/disable() to change (as other things need to happen) */\n  public get disabled(): boolean   { return this._disabled; }\n\n  /** @internal */\n  protected _disabled: boolean; // initial state to differentiate from false\n  /** @internal */\n  protected _eventRegister: {\n    [eventName: string]: EventCallback;\n  } = {};\n\n  public on(event: string, callback: EventCallback): void {\n    this._eventRegister[event] = callback;\n  }\n\n  public off(event: string): void {\n    delete this._eventRegister[event];\n  }\n\n  public enable(): void {\n    this._disabled = false;\n  }\n\n  public disable(): void {\n    this._disabled = true;\n  }\n\n  public destroy(): void {\n    delete this._eventRegister;\n  }\n\n  public triggerEvent(eventName: string, event: Event): boolean|void {\n    if (!this.disabled && this._eventRegister && this._eventRegister[eventName])\n      return this._eventRegister[eventName](event);\n  }\n}\n\nexport interface HTMLElementExtendOpt<T> {\n  el: HTMLElement;\n  option: T;\n  updateOption(T): DDBaseImplement;\n}\n","/**\n * dd-draggable.ts 6.0.1\n * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license\n */\n\nimport { DDManager } from './dd-manager';\nimport { Utils } from './utils';\nimport { DDBaseImplement, HTMLElementExtendOpt } from './dd-base-impl';\nimport { GridItemHTMLElement, DDUIData } from './types';\nimport { DDElementHost } from './dd-element';\nimport { isTouch, touchend, touchmove, touchstart, pointerdown } from './dd-touch';\n\n// TODO: merge with DDDragOpt ?\nexport interface DDDraggableOpt {\n  appendTo?: string | HTMLElement;\n  handle?: string;\n  helper?: string | HTMLElement | ((event: Event) => HTMLElement);\n  // containment?: string | HTMLElement; // TODO: not implemented yet\n  // revert?: string | boolean | unknown; // TODO: not implemented yet\n  // scroll?: boolean; // native support by HTML5 drag drop, can't be switch to off actually\n  start?: (event: Event, ui: DDUIData) => void;\n  stop?: (event: Event) => void;\n  drag?: (event: Event, ui: DDUIData) => void;\n}\n\ninterface DragOffset {\n  left: number;\n  top: number;\n  width: number;\n  height: number;\n  offsetLeft: number;\n  offsetTop: number;\n}\n\ntype DDDragEvent = 'drag' | 'dragstart' | 'dragstop';\n\n// let count = 0; // TEST\n\nexport class DDDraggable extends DDBaseImplement implements HTMLElementExtendOpt<DDDraggableOpt> {\n  public el: HTMLElement;\n  public option: DDDraggableOpt;\n  public helper: HTMLElement; // used by GridStackDDNative\n\n  /** @internal */\n  protected mouseDownEvent: MouseEvent;\n  /** @internal */\n  protected dragOffset: DragOffset;\n  /** @internal */\n  protected dragElementOriginStyle: Array<string>;\n  /** @internal */\n  protected dragEl: HTMLElement;\n  /** @internal true while we are dragging an item around */\n  protected dragging: boolean;\n  /** @internal */\n  protected parentOriginStylePosition: string;\n  /** @internal */\n  protected helperContainment: HTMLElement;\n  /** @internal properties we change during dragging, and restore back */\n  protected static originStyleProp = ['transition', 'pointerEvents', 'position', 'left', 'top'];\n\n  constructor(el: HTMLElement, option: DDDraggableOpt = {}) {\n    super();\n    this.el = el;\n    this.option = option;\n    // get the element that is actually supposed to be dragged by\n    let className = option.handle.substring(1);\n    this.dragEl = el.classList.contains(className) ? el : el.querySelector(option.handle) || el;\n    // create var event binding so we can easily remove and still look like TS methods (unlike anonymous functions)\n    this._mouseDown = this._mouseDown.bind(this);\n    this._mouseMove = this._mouseMove.bind(this);\n    this._mouseUp = this._mouseUp.bind(this);\n    this.enable();\n  }\n\n  public on(event: DDDragEvent, callback: (event: DragEvent) => void): void {\n    super.on(event, callback);\n  }\n\n  public off(event: DDDragEvent): void {\n    super.off(event);\n  }\n\n  public enable(): void {\n    if (this.disabled === false) return;\n    super.enable();\n    this.dragEl.addEventListener('mousedown', this._mouseDown);\n    if (isTouch) {\n      this.dragEl.addEventListener('touchstart', touchstart);\n      this.dragEl.addEventListener('pointerdown', pointerdown);\n      // this.dragEl.style.touchAction = 'none'; // not needed unlike pointerdown doc comment\n    }\n    this.el.classList.remove('ui-draggable-disabled');\n    this.el.classList.add('ui-draggable');\n  }\n\n  public disable(forDestroy = false): void {\n    if (this.disabled === true) return;\n    super.disable();\n    this.dragEl.removeEventListener('mousedown', this._mouseDown);\n    if (isTouch) {\n      this.dragEl.removeEventListener('touchstart', touchstart);\n      this.dragEl.removeEventListener('pointerdown', pointerdown);\n    }\n    this.el.classList.remove('ui-draggable');\n    if (!forDestroy) this.el.classList.add('ui-draggable-disabled');\n  }\n\n  public destroy(): void {\n    if (this.dragging) this._mouseUp(this.mouseDownEvent);\n    this.disable(true);\n    delete this.el;\n    delete this.helper;\n    delete this.option;\n    super.destroy();\n  }\n\n  public updateOption(opts: DDDraggableOpt): DDDraggable {\n    Object.keys(opts).forEach(key => this.option[key] = opts[key]);\n    return this;\n  }\n\n  /** @internal call when mouse goes down before a dragstart happens */\n  protected _mouseDown(e: MouseEvent): boolean {\n    // don't let more than one widget handle mouseStart\n    if (DDManager.mouseHandled) return;\n    if (e.button !== 0) return true; // only left click\n\n    // make sure we are clicking on a drag handle or child of it...\n    // Note: we don't need to check that's handle is an immediate child, as mouseHandled will prevent parents from also handling it (lowest wins)\n    let className = this.option.handle.substring(1);\n    let el = e.target as HTMLElement;\n    while (el && !el.classList.contains(className)) { el = el.parentElement; }\n    if (!el) return;\n    this.mouseDownEvent = e;\n    delete this.dragging;\n    delete DDManager.dragElement;\n    delete DDManager.dropElement;\n    // document handler so we can continue receiving moves as the item is 'fixed' position, and capture=true so WE get a first crack\n    document.addEventListener('mousemove', this._mouseMove, true); // true=capture, not bubble\n    document.addEventListener('mouseup', this._mouseUp, true);\n    if (isTouch) {\n      this.dragEl.addEventListener('touchmove', touchmove);\n      this.dragEl.addEventListener('touchend', touchend);\n    }\n\n    e.preventDefault();\n    DDManager.mouseHandled = true;\n    return true;\n  }\n\n  /** @internal called when the main page (after successful mousedown) receives a move event to drag the item around the screen */\n  protected _mouseMove(e: DragEvent): boolean {\n    // console.log(`${count++} move ${e.x},${e.y}`)\n    let s = this.mouseDownEvent;\n\n    if (this.dragging) {\n      this._dragFollow(e);\n      const ev = Utils.initEvent<DragEvent>(e, { target: this.el, type: 'drag' });\n      if (this.option.drag) {\n        this.option.drag(ev, this.ui());\n      }\n      this.triggerEvent('drag', ev);\n    } else if (Math.abs(e.x - s.x) + Math.abs(e.y - s.y) > 3) {\n      /**\n       * don't start unless we've moved at least 3 pixels\n       */\n      this.dragging = true;\n      DDManager.dragElement = this;\n      // if we're dragging an actual grid item, set the current drop as the grid (to detect enter/leave)\n      let grid = (this.el as GridItemHTMLElement).gridstackNode?.grid;\n      if (grid) {\n        DDManager.dropElement = (grid.el as DDElementHost).ddElement.ddDroppable;\n      } else {\n        delete DDManager.dropElement;\n      }\n      this.helper = this._createHelper(e);\n      this._setupHelperContainmentStyle();\n      this.dragOffset = this._getDragOffset(e, this.el, this.helperContainment);\n      const ev = Utils.initEvent<DragEvent>(e, { target: this.el, type: 'dragstart' });\n\n      this._setupHelperStyle(e);\n      if (this.option.start) {\n        this.option.start(ev, this.ui());\n      }\n      this.triggerEvent('dragstart', ev);\n    }\n    e.preventDefault();\n    return true;\n  }\n\n  /** @internal call when the mouse gets released to drop the item at current location */\n  protected _mouseUp(e: MouseEvent): void {\n    document.removeEventListener('mousemove', this._mouseMove, true);\n    document.removeEventListener('mouseup', this._mouseUp, true);\n    if (isTouch) {\n      this.dragEl.removeEventListener('touchmove', touchmove, true);\n      this.dragEl.removeEventListener('touchend', touchend, true);\n    }\n    if (this.dragging) {\n      delete this.dragging;\n\n      // reset the drop target if dragging over ourself (already parented, just moving during stop callback below)\n      if (DDManager.dropElement?.el === this.el.parentElement) {\n        delete DDManager.dropElement;\n      }\n\n      this.helperContainment.style.position = this.parentOriginStylePosition || null;\n      if (this.helper === this.el) {\n        this._removeHelperStyle();\n      } else {\n        this.helper.remove();\n      }\n      const ev = Utils.initEvent<DragEvent>(e, { target: this.el, type: 'dragstop' });\n      if (this.option.stop) {\n        this.option.stop(ev); // NOTE: destroy() will be called when removing item, so expect NULL ptr after!\n      }\n      this.triggerEvent('dragstop', ev);\n\n      // call the droppable method to receive the item\n      if (DDManager.dropElement) {\n        DDManager.dropElement.drop(e);\n      }\n    }\n    delete this.helper;\n    delete this.mouseDownEvent;\n    delete DDManager.dragElement;\n    delete DDManager.dropElement;\n    delete DDManager.mouseHandled;\n    e.preventDefault();\n  }\n\n  /** @internal create a clone copy (or user defined method) of the original drag item if set */\n  protected _createHelper(event: DragEvent): HTMLElement {\n    let helper = this.el;\n    if (typeof this.option.helper === 'function') {\n      helper = this.option.helper(event);\n    } else if (this.option.helper === 'clone') {\n      helper = Utils.cloneNode(this.el);\n    }\n    if (!document.body.contains(helper)) {\n      Utils.appendTo(helper, this.option.appendTo === 'parent' ? this.el.parentNode : this.option.appendTo);\n    }\n    if (helper === this.el) {\n      this.dragElementOriginStyle = DDDraggable.originStyleProp.map(prop => this.el.style[prop]);\n    }\n    return helper;\n  }\n\n  /** @internal set the fix position of the dragged item */\n  protected _setupHelperStyle(e: DragEvent): DDDraggable {\n    this.helper.classList.add('ui-draggable-dragging');\n    // TODO: set all at once with style.cssText += ... ? https://stackoverflow.com/questions/3968593\n    const style = this.helper.style;\n    style.pointerEvents = 'none'; // needed for over items to get enter/leave\n    // style.cursor = 'move'; //  TODO: can't set with pointerEvents=none ! (done in CSS as well)\n    style['min-width'] = 0; // since we no longer relative to our parent and we don't resize anyway (normally 100/#column %)\n    style.width = this.dragOffset.width + 'px';\n    style.height = this.dragOffset.height + 'px';\n    style.willChange = 'left, top';\n    style.position = 'fixed'; // let us drag between grids by not clipping as parent .grid-stack is position: 'relative'\n    this._dragFollow(e); // now position it\n    style.transition = 'none'; // show up instantly\n    setTimeout(() => {\n      if (this.helper) {\n        style.transition = null; // recover animation\n      }\n    }, 0);\n    return this;\n  }\n\n  /** @internal restore back the original style before dragging */\n  protected _removeHelperStyle(): DDDraggable {\n    this.helper.classList.remove('ui-draggable-dragging');\n    let node = (this.helper as GridItemHTMLElement)?.gridstackNode;\n    // don't bother restoring styles if we're gonna remove anyway...\n    if (this.dragElementOriginStyle && (!node || !node._isAboutToRemove)) {\n      let helper = this.helper;\n      // don't animate, otherwise we animate offseted when switching back to 'absolute' from 'fixed'\n      let transition = this.dragElementOriginStyle['transition'] || null;\n      helper.style.transition = this.dragElementOriginStyle['transition'] = 'none';\n      DDDraggable.originStyleProp.forEach(prop => helper.style[prop] = this.dragElementOriginStyle[prop] || null);\n      setTimeout(() => helper.style.transition = transition, 50); // recover animation from saved vars after a pause (0 isn't enough #1973)\n    }\n    delete this.dragElementOriginStyle;\n    return this;\n  }\n\n  /** @internal updates the top/left position to follow the mouse */\n  protected _dragFollow(e: DragEvent): void {\n    let containmentRect = { left: 0, top: 0 };\n    // if (this.helper.style.position === 'absolute') { // we use 'fixed'\n    //   const { left, top } = this.helperContainment.getBoundingClientRect();\n    //   containmentRect = { left, top };\n    // }\n    const style = this.helper.style;\n    const offset = this.dragOffset;\n    style.left = e.clientX + offset.offsetLeft - containmentRect.left + 'px';\n    style.top = e.clientY + offset.offsetTop - containmentRect.top + 'px';\n  }\n\n  /** @internal */\n  protected _setupHelperContainmentStyle(): DDDraggable {\n    this.helperContainment = this.helper.parentElement;\n    if (this.helper.style.position !== 'fixed') {\n      this.parentOriginStylePosition = this.helperContainment.style.position;\n      if (window.getComputedStyle(this.helperContainment).position.match(/static/)) {\n        this.helperContainment.style.position = 'relative';\n      }\n    }\n    return this;\n  }\n\n  /** @internal */\n  protected _getDragOffset(event: DragEvent, el: HTMLElement, parent: HTMLElement): DragOffset {\n\n    // in case ancestor has transform/perspective css properties that change the viewpoint\n    let xformOffsetX = 0;\n    let xformOffsetY = 0;\n    if (parent) {\n      const testEl = document.createElement('div');\n      Utils.addElStyles(testEl, {\n        opacity: '0',\n        position: 'fixed',\n        top: 0 + 'px',\n        left: 0 + 'px',\n        width: '1px',\n        height: '1px',\n        zIndex: '-999999',\n      });\n      parent.appendChild(testEl);\n      const testElPosition = testEl.getBoundingClientRect();\n      parent.removeChild(testEl);\n      xformOffsetX = testElPosition.left;\n      xformOffsetY = testElPosition.top;\n      // TODO: scale ?\n    }\n\n    const targetOffset = el.getBoundingClientRect();\n    return {\n      left: targetOffset.left,\n      top: targetOffset.top,\n      offsetLeft: - event.clientX + targetOffset.left - xformOffsetX,\n      offsetTop: - event.clientY + targetOffset.top - xformOffsetY,\n      width: targetOffset.width,\n      height: targetOffset.height\n    };\n  }\n\n  /** @internal TODO: set to public as called by DDDroppable! */\n  public ui(): DDUIData {\n    const containmentEl = this.el.parentElement;\n    const containmentRect = containmentEl.getBoundingClientRect();\n    const offset = this.helper.getBoundingClientRect();\n    return {\n      position: { //Current CSS position of the helper as { top, left } object\n        top: offset.top - containmentRect.top,\n        left: offset.left - containmentRect.left\n      }\n      /* not used by GridStack for now...\n      helper: [this.helper], //The object arr representing the helper that's being dragged.\n      offset: { top: offset.top, left: offset.left } // Current offset position of the helper as { top, left } object.\n      */\n    };\n  }\n}\n","/**\n * dd-droppable.ts 6.0.1\n * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license\n */\n\nimport { DDDraggable } from './dd-draggable';\nimport { DDManager } from './dd-manager';\nimport { DDBaseImplement, HTMLElementExtendOpt } from './dd-base-impl';\nimport { Utils } from './utils';\nimport { DDElementHost } from './dd-element';\nimport { isTouch, pointerenter, pointerleave } from './dd-touch';\nimport { GridHTMLElement } from './gridstack';\n\nexport interface DDDroppableOpt {\n  accept?: string | ((el: HTMLElement) => boolean);\n  drop?: (event: DragEvent, ui) => void;\n  over?: (event: DragEvent, ui) => void;\n  out?: (event: DragEvent, ui) => void;\n}\n\n// let count = 0; // TEST\n\nexport class DDDroppable extends DDBaseImplement implements HTMLElementExtendOpt<DDDroppableOpt> {\n\n  public accept: (el: HTMLElement) => boolean;\n  public el: HTMLElement;\n  public option: DDDroppableOpt;\n\n  constructor(el: HTMLElement, opts: DDDroppableOpt = {}) {\n    super();\n    this.el = el;\n    this.option = opts;\n    // create var event binding so we can easily remove and still look like TS methods (unlike anonymous functions)\n    this._mouseEnter = this._mouseEnter.bind(this);\n    this._mouseLeave = this._mouseLeave.bind(this);\n    this.enable();\n    this._setupAccept();\n  }\n\n  public on(event: 'drop' | 'dropover' | 'dropout', callback: (event: DragEvent) => void): void {\n    super.on(event, callback);\n  }\n\n  public off(event: 'drop' | 'dropover' | 'dropout'): void {\n    super.off(event);\n  }\n\n  public enable(): void {\n    if (this.disabled === false) return;\n    super.enable();\n    this.el.classList.add('ui-droppable');\n    this.el.classList.remove('ui-droppable-disabled');\n    this.el.addEventListener('mouseenter', this._mouseEnter);\n    this.el.addEventListener('mouseleave', this._mouseLeave);\n    if (isTouch) {\n      this.el.addEventListener('pointerenter', pointerenter);\n      this.el.addEventListener('pointerleave', pointerleave);\n    }\n  }\n\n  public disable(forDestroy = false): void {\n    if (this.disabled === true) return;\n    super.disable();\n    this.el.classList.remove('ui-droppable');\n    if (!forDestroy) this.el.classList.add('ui-droppable-disabled');\n    this.el.removeEventListener('mouseenter', this._mouseEnter);\n    this.el.removeEventListener('mouseleave', this._mouseLeave);\n    if (isTouch) {\n      this.el.removeEventListener('pointerenter', pointerenter);\n      this.el.removeEventListener('pointerleave', pointerleave);\n    }\n  }\n\n  public destroy(): void {\n    this.disable(true);\n    this.el.classList.remove('ui-droppable');\n    this.el.classList.remove('ui-droppable-disabled');\n    super.destroy();\n  }\n\n  public updateOption(opts: DDDroppableOpt): DDDroppable {\n    Object.keys(opts).forEach(key => this.option[key] = opts[key]);\n    this._setupAccept();\n    return this;\n  }\n\n  /** @internal called when the cursor enters our area - prepare for a possible drop and track leaving */\n  protected _mouseEnter(e: MouseEvent): void {\n    // console.log(`${count++} Enter ${this.el.id || (this.el as GridHTMLElement).gridstack.opts.id}`); // TEST\n    if (!DDManager.dragElement) return;\n    if (!this._canDrop()) return;\n    e.preventDefault();\n    e.stopPropagation();\n\n    // make sure when we enter this, that the last one gets a leave FIRST to correctly cleanup as we don't always do\n    if (DDManager.dropElement && DDManager.dropElement !== this) {\n      DDManager.dropElement._mouseLeave(e as DragEvent);\n    }\n    DDManager.dropElement = this;\n\n    const ev = Utils.initEvent<DragEvent>(e, { target: this.el, type: 'dropover' });\n    if (this.option.over) {\n      this.option.over(ev, this._ui(DDManager.dragElement))\n    }\n    this.triggerEvent('dropover', ev);\n    this.el.classList.add('ui-droppable-over');\n    // console.log('tracking'); // TEST\n  }\n\n  /** @internal called when the item is leaving our area, stop tracking if we had moving item */\n  protected _mouseLeave(e: MouseEvent): void {\n    // console.log(`${count++} Leave ${this.el.id || (this.el as GridHTMLElement).gridstack.opts.id}`); // TEST\n    if (!DDManager.dragElement || DDManager.dropElement !== this) return;\n    e.preventDefault();\n    e.stopPropagation();\n\n    const ev = Utils.initEvent<DragEvent>(e, { target: this.el, type: 'dropout' });\n    if (this.option.out) {\n      this.option.out(ev, this._ui(DDManager.dragElement))\n    }\n    this.triggerEvent('dropout', ev);\n\n    if (DDManager.dropElement === this) {\n      delete DDManager.dropElement;\n      // console.log('not tracking'); // TEST\n\n      // if we're still over a parent droppable, send it an enter as we don't get one from leaving nested children\n      let parentDrop: DDDroppable;\n      let parent: DDElementHost = this.el.parentElement;\n      while (!parentDrop && parent) {\n        parentDrop = parent.ddElement?.ddDroppable;\n        parent = parent.parentElement;\n      }\n      if (parentDrop) {\n        parentDrop._mouseEnter(e);\n      }\n    }\n  }\n\n  /** item is being dropped on us - called by the drag mouseup handler - this calls the client drop event */\n  public drop(e: MouseEvent): void {\n    e.preventDefault();\n    const ev = Utils.initEvent<DragEvent>(e, { target: this.el, type: 'drop' });\n    if (this.option.drop) {\n      this.option.drop(ev, this._ui(DDManager.dragElement))\n    }\n    this.triggerEvent('drop', ev);\n  }\n\n  /** @internal true if element matches the string/method accept option */\n  protected _canDrop(): boolean {\n    return DDManager.dragElement && (!this.accept || this.accept(DDManager.dragElement.el));\n  }\n\n  /** @internal */\n  protected _setupAccept(): DDDroppable {\n    if (!this.option.accept) return this;\n    if (typeof this.option.accept === 'string') {\n      this.accept = (el: HTMLElement) => el.matches(this.option.accept as string);\n    } else {\n      this.accept = this.option.accept;\n    }\n    return this;\n  }\n\n  /** @internal */\n  protected _ui(drag: DDDraggable) {\n    return {\n      draggable: drag.el,\n      ...drag.ui()\n    };\n  }\n}\n\n","/**\n * dd-elements.ts 6.0.1\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\n */\n\nimport { DDResizable, DDResizableOpt } from './dd-resizable';\nimport { GridItemHTMLElement } from './types';\nimport { DDDraggable, DDDraggableOpt } from './dd-draggable';\nimport { DDDroppable, DDDroppableOpt } from './dd-droppable';\n\nexport interface DDElementHost extends GridItemHTMLElement {\n  ddElement?: DDElement;\n}\n\nexport class DDElement {\n\n  static init(el: DDElementHost): DDElement {\n    if (!el.ddElement) { el.ddElement = new DDElement(el); }\n    return el.ddElement;\n  }\n\n  public el: DDElementHost;\n  public ddDraggable?: DDDraggable;\n  public ddDroppable?: DDDroppable;\n  public ddResizable?: DDResizable;\n\n  constructor(el: DDElementHost) {\n    this.el = el;\n  }\n\n  public on(eventName: string, callback: (event: MouseEvent) => void): DDElement {\n    if (this.ddDraggable && ['drag', 'dragstart', 'dragstop'].indexOf(eventName) > -1) {\n      this.ddDraggable.on(eventName as 'drag' | 'dragstart' | 'dragstop', callback);\n    } else if (this.ddDroppable && ['drop', 'dropover', 'dropout'].indexOf(eventName) > -1) {\n      this.ddDroppable.on(eventName as 'drop' | 'dropover' | 'dropout', callback);\n    } else if (this.ddResizable && ['resizestart', 'resize', 'resizestop'].indexOf(eventName) > -1) {\n      this.ddResizable.on(eventName as 'resizestart' | 'resize' | 'resizestop', callback);\n    }\n    return this;\n  }\n\n  public off(eventName: string): DDElement {\n    if (this.ddDraggable && ['drag', 'dragstart', 'dragstop'].indexOf(eventName) > -1) {\n      this.ddDraggable.off(eventName as 'drag' | 'dragstart' | 'dragstop');\n    } else if (this.ddDroppable && ['drop', 'dropover', 'dropout'].indexOf(eventName) > -1) {\n      this.ddDroppable.off(eventName as 'drop' | 'dropover' | 'dropout');\n    } else if (this.ddResizable && ['resizestart', 'resize', 'resizestop'].indexOf(eventName) > -1) {\n      this.ddResizable.off(eventName as 'resizestart' | 'resize' | 'resizestop');\n    }\n    return this;\n  }\n\n  public setupDraggable(opts: DDDraggableOpt): DDElement {\n    if (!this.ddDraggable) {\n      this.ddDraggable = new DDDraggable(this.el, opts);\n    } else {\n      this.ddDraggable.updateOption(opts);\n    }\n    return this;\n  }\n\n  public cleanDraggable(): DDElement {\n    if (this.ddDraggable) {\n      this.ddDraggable.destroy();\n      delete this.ddDraggable;\n    }\n    return this;\n  }\n\n  public setupResizable(opts: DDResizableOpt): DDElement {\n    if (!this.ddResizable) {\n      this.ddResizable = new DDResizable(this.el, opts);\n    } else {\n      this.ddResizable.updateOption(opts);\n    }\n    return this;\n  }\n\n  public cleanResizable(): DDElement {\n    if (this.ddResizable) {\n      this.ddResizable.destroy();\n      delete this.ddResizable;\n    }\n    return this;\n  }\n\n  public setupDroppable(opts: DDDroppableOpt): DDElement {\n    if (!this.ddDroppable) {\n      this.ddDroppable = new DDDroppable(this.el, opts);\n    } else {\n      this.ddDroppable.updateOption(opts);\n    }\n    return this;\n  }\n\n  public cleanDroppable(): DDElement {\n    if (this.ddDroppable) {\n      this.ddDroppable.destroy();\n      delete this.ddDroppable;\n    }\n    return this;\n  }\n}\n","/**\r\n * dd-gridstack.ts 6.0.1\r\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\r\n */\r\n\r\n/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport { GridItemHTMLElement, GridStackNode, GridStackElement, DDUIData, DDDragInOpt, GridStackPosition } from './types';\r\nimport { GridStack } from './gridstack';\r\nimport { Utils } from './utils';\r\nimport { DDManager } from './dd-manager';\r\nimport { DDElement, DDElementHost } from './dd-element';\r\n\r\n/** Drag&Drop drop options */\r\nexport type DDDropOpt = {\r\n  /** function or class type that this grid will accept as dropped items (see GridStackOptions.acceptWidgets) */\r\n  accept?: (el: GridItemHTMLElement) => boolean;\r\n}\r\n\r\n/** drag&drop options currently called from the main code, but others can be passed in grid options */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nexport type DDOpts = 'enable' | 'disable' | 'destroy' | 'option' | string | any;\r\nexport type DDKey = 'minWidth' | 'minHeight' | 'maxWidth' | 'maxHeight';\r\nexport type DDValue = number | string;\r\n\r\n/** drag&drop events callbacks */\r\nexport type DDCallback = (event: Event, arg2: GridItemHTMLElement, helper?: GridItemHTMLElement) => void;\r\n\r\n// let count = 0; // TEST\r\n\r\n/**\r\n * HTML Native Mouse and Touch Events Drag and Drop functionality.\r\n */\r\nexport class DDGridStack {\r\n\r\n  /** get the global (but static to this code) DD implementation */\r\n  static get(): DDGridStack {\r\n    return dd;\r\n  }\r\n\r\n  public resizable(el: GridItemHTMLElement, opts: DDOpts, key?: DDKey, value?: DDValue): DDGridStack {\r\n    this._getDDElements(el).forEach(dEl => {\r\n      if (opts === 'disable' || opts === 'enable') {\r\n        dEl.ddResizable && dEl.ddResizable[opts](); // can't create DD as it requires options for setupResizable()\r\n      } else if (opts === 'destroy') {\r\n        dEl.ddResizable && dEl.cleanResizable();\r\n      } else if (opts === 'option') {\r\n        dEl.setupResizable({ [key]: value });\r\n      } else {\r\n        const grid = dEl.el.gridstackNode.grid;\r\n        let handles = dEl.el.getAttribute('gs-resize-handles') ? dEl.el.getAttribute('gs-resize-handles') : grid.opts.resizable.handles;\r\n        let autoHide = !grid.opts.alwaysShowResizeHandle;\r\n        dEl.setupResizable({\r\n          ...grid.opts.resizable,\r\n          ...{ handles, autoHide },\r\n          ...{\r\n            start: opts.start,\r\n            stop: opts.stop,\r\n            resize: opts.resize\r\n          }\r\n        });\r\n      }\r\n    });\r\n    return this;\r\n  }\r\n\r\n  public draggable(el: GridItemHTMLElement, opts: DDOpts, key?: DDKey, value?: DDValue): DDGridStack {\r\n    this._getDDElements(el).forEach(dEl => {\r\n      if (opts === 'disable' || opts === 'enable') {\r\n        dEl.ddDraggable && dEl.ddDraggable[opts](); // can't create DD as it requires options for setupDraggable()\r\n      } else if (opts === 'destroy') {\r\n        dEl.ddDraggable && dEl.cleanDraggable();\r\n      } else if (opts === 'option') {\r\n        dEl.setupDraggable({ [key]: value });\r\n      } else {\r\n        const grid = dEl.el.gridstackNode.grid;\r\n        dEl.setupDraggable({\r\n          ...grid.opts.draggable,\r\n          ...{\r\n            // containment: (grid.opts._isNested && !grid.opts.dragOut) ? grid.el.parentElement : (grid.opts.draggable.containment || null),\r\n            start: opts.start,\r\n            stop: opts.stop,\r\n            drag: opts.drag\r\n          }\r\n        });\r\n      }\r\n    });\r\n    return this;\r\n  }\r\n\r\n  public dragIn(el: GridStackElement, opts: DDDragInOpt): DDGridStack {\r\n    this._getDDElements(el).forEach(dEl => dEl.setupDraggable(opts));\r\n    return this;\r\n  }\r\n\r\n  public droppable(el: GridItemHTMLElement, opts: DDOpts | DDDropOpt, key?: DDKey, value?: DDValue): DDGridStack {\r\n    if (typeof opts.accept === 'function' && !opts._accept) {\r\n      opts._accept = opts.accept;\r\n      opts.accept = (el) => opts._accept(el);\r\n    }\r\n    this._getDDElements(el).forEach(dEl => {\r\n      if (opts === 'disable' || opts === 'enable') {\r\n        dEl.ddDroppable && dEl.ddDroppable[opts]();\r\n      } else if (opts === 'destroy') {\r\n        if (dEl.ddDroppable) { // error to call destroy if not there\r\n          dEl.cleanDroppable();\r\n        }\r\n      } else if (opts === 'option') {\r\n        dEl.setupDroppable({ [key]: value });\r\n      } else {\r\n        dEl.setupDroppable(opts);\r\n      }\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /** true if element is droppable */\r\n  public isDroppable(el: DDElementHost): boolean {\r\n    return !!(el && el.ddElement && el.ddElement.ddDroppable && !el.ddElement.ddDroppable.disabled);\r\n  }\r\n\r\n  /** true if element is draggable */\r\n  public isDraggable(el: DDElementHost): boolean {\r\n    return !!(el && el.ddElement && el.ddElement.ddDraggable && !el.ddElement.ddDraggable.disabled);\r\n  }\r\n\r\n  /** true if element is draggable */\r\n  public isResizable(el: DDElementHost): boolean {\r\n    return !!(el && el.ddElement && el.ddElement.ddResizable && !el.ddElement.ddResizable.disabled);\r\n  }\r\n\r\n  public on(el: GridItemHTMLElement, name: string, callback: DDCallback): DDGridStack {\r\n    this._getDDElements(el).forEach(dEl =>\r\n      dEl.on(name, (event: Event) => {\r\n        callback(\r\n          event,\r\n          DDManager.dragElement ? DDManager.dragElement.el : event.target as GridItemHTMLElement,\r\n          DDManager.dragElement ? DDManager.dragElement.helper : null)\r\n      })\r\n    );\r\n    return this;\r\n  }\r\n\r\n  public off(el: GridItemHTMLElement, name: string): DDGridStack {\r\n    this._getDDElements(el).forEach(dEl => dEl.off(name));\r\n    return this;\r\n  }\r\n\r\n  /** @internal returns a list of DD elements, creating them on the fly by default */\r\n  protected _getDDElements(els: GridStackElement, create = true): DDElement[] {\r\n    let hosts = Utils.getElements(els) as DDElementHost[];\r\n    if (!hosts.length) return [];\r\n    let list = hosts.map(e => e.ddElement || (create ? DDElement.init(e) : null));\r\n    if (!create) { list.filter(d => d); } // remove nulls\r\n    return list;\r\n  }\r\n}\r\n\r\n/** global instance */\r\nconst dd = new DDGridStack;\r\n\r\n/********************************************************************************\r\n * GridStack code that is doing drag&drop extracted here so main class is smaller\r\n * for static grid that don't do any of this work anyway. Saves about 31k (41k -> 72k)\r\n * https://www.typescriptlang.org/docs/handbook/declaration-merging.html\r\n * https://www.typescriptlang.org/docs/handbook/mixins.html\r\n ********************************************************************************/\r\n\r\n/** @internal called to add drag over to support widgets being added externally */\r\nGridStack.prototype._setupAcceptWidget = function(this: GridStack): GridStack {\r\n\r\n  // check if we need to disable things\r\n  if (this.opts.staticGrid || (!this.opts.acceptWidgets && !this.opts.removable)) {\r\n    dd.droppable(this.el, 'destroy');\r\n    return this;\r\n  }\r\n\r\n  // vars shared across all methods\r\n  let cellHeight: number, cellWidth: number;\r\n\r\n  let onDrag = (event: DragEvent, el: GridItemHTMLElement, helper: GridItemHTMLElement) => {\r\n    let node = el.gridstackNode;\r\n    if (!node) return;\r\n\r\n    helper = helper || el;\r\n    let parent = this.el.getBoundingClientRect();\r\n    let {top, left} = helper.getBoundingClientRect();\r\n    left -= parent.left;\r\n    top -= parent.top;\r\n    let ui: DDUIData = {position: {top, left}};\r\n\r\n    if (node._temporaryRemoved) {\r\n      node.x = Math.max(0, Math.round(left / cellWidth));\r\n      node.y = Math.max(0, Math.round(top / cellHeight));\r\n      delete node.autoPosition;\r\n      this.engine.nodeBoundFix(node);\r\n\r\n      // don't accept *initial* location if doesn't fit #1419 (locked drop region, or can't grow), but maybe try if it will go somewhere\r\n      if (!this.engine.willItFit(node)) {\r\n        node.autoPosition = true; // ignore x,y and try for any slot...\r\n        if (!this.engine.willItFit(node)) {\r\n          dd.off(el, 'drag'); // stop calling us\r\n          return; // full grid or can't grow\r\n        }\r\n        if (node._willFitPos) {\r\n          // use the auto position instead #1687\r\n          Utils.copyPos(node, node._willFitPos);\r\n          delete node._willFitPos;\r\n        }\r\n      }\r\n\r\n      // re-use the existing node dragging method\r\n      this._onStartMoving(helper, event, ui, node, cellWidth, cellHeight);\r\n    } else {\r\n      // re-use the existing node dragging that does so much of the collision detection\r\n      this._dragOrResize(helper, event, ui, node, cellWidth, cellHeight);\r\n    }\r\n  }\r\n\r\n  dd.droppable(this.el, {\r\n    accept: (el: GridItemHTMLElement) => {\r\n      let node: GridStackNode = el.gridstackNode;\r\n      // set accept drop to true on ourself (which we ignore) so we don't get \"can't drop\" icon in HTML5 mode while moving\r\n      if (node?.grid === this) return true;\r\n      if (!this.opts.acceptWidgets) return false;\r\n      // prevent deeper nesting until rest of 992 can be fixed\r\n      if (node?.subGrid) return false;\r\n      // check for accept method or class matching\r\n      let canAccept = true;\r\n      if (typeof this.opts.acceptWidgets === 'function') {\r\n        canAccept = this.opts.acceptWidgets(el);\r\n      } else {\r\n        let selector = (this.opts.acceptWidgets === true ? '.grid-stack-item' : this.opts.acceptWidgets as string);\r\n        canAccept = el.matches(selector);\r\n      }\r\n      // finally check to make sure we actually have space left #1571\r\n      if (canAccept && node && this.opts.maxRow) {\r\n        let n = {w: node.w, h: node.h, minW: node.minW, minH: node.minH}; // only width/height matters and autoPosition\r\n        canAccept = this.engine.willItFit(n);\r\n      }\r\n      return canAccept;\r\n    }\r\n  })\r\n  /**\r\n   * entering our grid area\r\n   */\r\n    .on(this.el, 'dropover', (event: Event, el: GridItemHTMLElement, helper: GridItemHTMLElement) => {\r\n    // console.log(`over ${this.el.gridstack.opts.id} ${count++}`); // TEST\r\n      let node = el.gridstackNode;\r\n      // ignore drop enter on ourself (unless we temporarily removed) which happens on a simple drag of our item\r\n      if (node?.grid === this && !node._temporaryRemoved) {\r\n      // delete node._added; // reset this to track placeholder again in case we were over other grid #1484 (dropout doesn't always clear)\r\n        return false; // prevent parent from receiving msg (which may be a grid as well)\r\n      }\r\n\r\n      // fix #1578 when dragging fast, we may not get a leave on the previous grid so force one now\r\n      if (node?.grid && node.grid !== this && !node._temporaryRemoved) {\r\n      // console.log('dropover without leave'); // TEST\r\n        let otherGrid = node.grid;\r\n        otherGrid._leave(el, helper);\r\n      }\r\n\r\n      // cache cell dimensions (which don't change), position can animate if we removed an item in otherGrid that affects us...\r\n      cellWidth = this.cellWidth();\r\n      cellHeight = this.getCellHeight(true);\r\n\r\n      // load any element attributes if we don't have a node\r\n      if (!node) {// @ts-ignore private read only on ourself\r\n        node = this._readAttr(el);\r\n      }\r\n      if (!node.grid) {\r\n        node._isExternal = true;\r\n        el.gridstackNode = node;\r\n      }\r\n\r\n      // calculate the grid size based on element outer size\r\n      helper = helper || el;\r\n      let w = node.w || Math.round(helper.offsetWidth / cellWidth) || 1;\r\n      let h = node.h || Math.round(helper.offsetHeight / cellHeight) || 1;\r\n\r\n      // if the item came from another grid, make a copy and save the original info in case we go back there\r\n      if (node.grid && node.grid !== this) {\r\n      // copy the node original values (min/max/id/etc...) but override width/height/other flags which are this grid specific\r\n      // console.log('dropover cloning node'); // TEST\r\n        if (!el._gridstackNodeOrig) el._gridstackNodeOrig = node; // shouldn't have multiple nested!\r\n        el.gridstackNode = node = {...node, w, h, grid: this};\r\n        this.engine.cleanupNode(node)\r\n          .nodeBoundFix(node);\r\n        // restore some internal fields we need after clearing them all\r\n        node._initDD =\r\n      node._isExternal =  // DOM needs to be re-parented on a drop\r\n      node._temporaryRemoved = true; // so it can be inserted onDrag below\r\n      } else {\r\n        node.w = w; node.h = h;\r\n        node._temporaryRemoved = true; // so we can insert it\r\n      }\r\n\r\n      // clear any marked for complete removal (Note: don't check _isAboutToRemove as that is cleared above - just do it)\r\n      _itemRemoving(node.el, false);\r\n\r\n      dd.on(el, 'drag', onDrag);\r\n      // make sure this is called at least once when going fast #1578\r\n      onDrag(event as DragEvent, el, helper);\r\n      return false; // prevent parent from receiving msg (which may be a grid as well)\r\n    })\r\n  /**\r\n   * Leaving our grid area...\r\n   */\r\n    .on(this.el, 'dropout', (event, el: GridItemHTMLElement, helper: GridItemHTMLElement) => {\r\n    // console.log(`out ${this.el.gridstack.opts.id} ${count++}`); // TEST\r\n      let node = el.gridstackNode;\r\n      if (!node) return false;\r\n      // fix #1578 when dragging fast, we might get leave after other grid gets enter (which calls us to clean)\r\n      // so skip this one if we're not the active grid really..\r\n      if (!node.grid || node.grid === this) {\r\n        this._leave(el, helper);\r\n      }\r\n      return false; // prevent parent from receiving msg (which may be grid as well)\r\n    })\r\n  /**\r\n   * end - releasing the mouse\r\n   */\r\n    .on(this.el, 'drop', (event, el: GridItemHTMLElement, helper: GridItemHTMLElement) => {\r\n      let node = el.gridstackNode;\r\n      // ignore drop on ourself from ourself that didn't come from the outside - dragend will handle the simple move instead\r\n      if (node?.grid === this && !node._isExternal) return false;\r\n\r\n      let wasAdded = !!this.placeholder.parentElement; // skip items not actually added to us because of constrains, but do cleanup #1419\r\n      this.placeholder.remove();\r\n\r\n      // notify previous grid of removal\r\n      // console.log('drop delete _gridstackNodeOrig') // TEST\r\n      let origNode = el._gridstackNodeOrig;\r\n      delete el._gridstackNodeOrig;\r\n      if (wasAdded && origNode && origNode.grid && origNode.grid !== this) {\r\n        let oGrid = origNode.grid;\r\n        oGrid.engine.removedNodes.push(origNode);\r\n        oGrid._triggerRemoveEvent();\r\n      }\r\n\r\n      if (!node) return false;\r\n\r\n      // use existing placeholder node as it's already in our list with drop location\r\n      if (wasAdded) {\r\n        this.engine.cleanupNode(node); // removes all internal _xyz values\r\n        node.grid = this;\r\n      }\r\n      dd.off(el, 'drag');\r\n      // if we made a copy ('helper' which is temp) of the original node then insert a copy, else we move the original node (#1102)\r\n      // as the helper will be nuked by jquery-ui otherwise\r\n      if (helper !== el) {\r\n        helper.remove();\r\n        el.gridstackNode = origNode; // original item (left behind) is re-stored to pre dragging as the node now has drop info\r\n        if (wasAdded) {\r\n          el = el.cloneNode(true) as GridItemHTMLElement;\r\n        }\r\n      } else {\r\n        el.remove(); // reduce flicker as we change depth here, and size further down\r\n        this._removeDD(el);\r\n      }\r\n      if (!wasAdded) return false;\r\n      el.gridstackNode = node;\r\n      node.el = el;\r\n      // @ts-ignore\r\n      Utils.copyPos(node, this._readAttr(this.placeholder)); // placeholder values as moving VERY fast can throw things off #1578\r\n      Utils.removePositioningStyles(el);// @ts-ignore\r\n      this._writeAttr(el, node);\r\n      this.el.appendChild(el);// @ts-ignore // TODO: now would be ideal time to _removeHelperStyle() overriding floating styles (native only)\r\n      this._updateContainerHeight();\r\n      this.engine.addedNodes.push(node);// @ts-ignore\r\n      this._triggerAddEvent();// @ts-ignore\r\n      this._triggerChangeEvent();\r\n\r\n      this.engine.endUpdate();\r\n      if (this._gsEventHandler['dropped']) {\r\n        this._gsEventHandler['dropped']({...event, type: 'dropped'}, origNode && origNode.grid ? origNode : undefined, node);\r\n      }\r\n\r\n      // wait till we return out of the drag callback to set the new drag&resize handler or they may get messed up\r\n      window.setTimeout(() => {\r\n      // IFF we are still there (some application will use as placeholder and insert their real widget instead and better call makeWidget())\r\n        if (node.el && node.el.parentElement) {\r\n          this._prepareDragDropByNode(node);\r\n        } else {\r\n          this.engine.removeNode(node);\r\n        }\r\n      });\r\n\r\n      return false; // prevent parent from receiving msg (which may be grid as well)\r\n    });\r\n  return this;\r\n}\r\n\r\n/** @internal mark item for removal */\r\nfunction _itemRemoving(el: GridItemHTMLElement, remove: boolean) {\r\n  let node = el ? el.gridstackNode : undefined;\r\n  if (!node || !node.grid) return;\r\n  remove ? node._isAboutToRemove = true : delete node._isAboutToRemove;\r\n  remove ? el.classList.add('grid-stack-item-removing') : el.classList.remove('grid-stack-item-removing');\r\n}\r\n\r\n/** @internal called to setup a trash drop zone if the user specifies it */\r\nGridStack.prototype._setupRemoveDrop = function(this: GridStack): GridStack {\r\n  if (!this.opts.staticGrid && typeof this.opts.removable === 'string') {\r\n    let trashEl = document.querySelector(this.opts.removable) as HTMLElement;\r\n    if (!trashEl) return this;\r\n    // only register ONE drop-over/dropout callback for the 'trash', and it will\r\n    // update the passed in item and parent grid because the 'trash' is a shared resource anyway,\r\n    // and Native DD only has 1 event CB (having a list and technically a per grid removableOptions complicates things greatly)\r\n    if (!dd.isDroppable(trashEl)) {\r\n      dd.droppable(trashEl, this.opts.removableOptions)\r\n        .on(trashEl, 'dropover', (event, el) => _itemRemoving(el, true))\r\n        .on(trashEl, 'dropout',  (event, el) => _itemRemoving(el, false));\r\n    }\r\n  }\r\n  return this;\r\n}\r\n\r\n/**\r\n * call to setup dragging in from the outside (say toolbar), by specifying the class selection and options.\r\n * Called during GridStack.init() as options, but can also be called directly (last param are cached) in case the toolbar\r\n * is dynamically create and needs to change later.\r\n **/\r\nGridStack.setupDragIn = function(this: GridStack, _dragIn?: string, _dragInOptions?: DDDragInOpt) {\r\n  let dragIn: string;\r\n  let dragInOptions: DDDragInOpt;\r\n  const dragInDefaultOptions: DDDragInOpt = {\r\n    handle: '.grid-stack-item-content',\r\n    appendTo: 'body',\r\n    // revert: 'invalid',\r\n    // scroll: false,\r\n  };\r\n\r\n  // cache in the passed in values (form grid init?) so they don't have to resend them each time\r\n  if (_dragIn) {\r\n    dragIn = _dragIn;\r\n    dragInOptions = {...dragInDefaultOptions, ...(_dragInOptions || {})};\r\n  }\r\n  if (typeof dragIn !== 'string') return;\r\n  Utils.getElements(dragIn).forEach(el => {\r\n    if (!dd.isDraggable(el)) dd.dragIn(el, dragInOptions);\r\n  });\r\n}\r\n\r\n/** @internal prepares the element for drag&drop **/\r\nGridStack.prototype._prepareDragDropByNode = function(this: GridStack, node: GridStackNode): GridStack {\r\n  let el = node.el;\r\n  const noMove = node.noMove || this.opts.disableDrag;\r\n  const noResize = node.noResize || this.opts.disableResize;\r\n\r\n  // check for disabled grid first\r\n  if (this.opts.staticGrid || (noMove && noResize)) {\r\n    if (node._initDD) {\r\n      this._removeDD(el); // nukes everything instead of just disable, will add some styles back next\r\n      delete node._initDD;\r\n    }\r\n    el.classList.add('ui-draggable-disabled', 'ui-resizable-disabled'); // add styles one might depend on #1435\r\n    return this;\r\n  }\r\n\r\n  if (!node._initDD) {\r\n    // variables used/cashed between the 3 start/move/end methods, in addition to node passed above\r\n    let cellWidth: number;\r\n    let cellHeight: number;\r\n\r\n    /** called when item starts moving/resizing */\r\n    let onStartMoving = (event: Event, ui: DDUIData) => {\r\n      // trigger any 'dragstart' / 'resizestart' manually\r\n      if (this._gsEventHandler[event.type]) {\r\n        this._gsEventHandler[event.type](event, event.target);\r\n      }\r\n      cellWidth = this.cellWidth();\r\n      cellHeight = this.getCellHeight(true); // force pixels for calculations\r\n\r\n      this._onStartMoving(el, event, ui, node, cellWidth, cellHeight);\r\n    }\r\n\r\n    /** called when item is being dragged/resized */\r\n    let dragOrResize = (event: Event, ui: DDUIData) => {\r\n      this._dragOrResize(el, event, ui, node, cellWidth, cellHeight);\r\n    }\r\n\r\n    /** called when the item stops moving/resizing */\r\n    let onEndMoving = (event: Event) => {\r\n      this.placeholder.remove();\r\n      delete node._moving;\r\n      delete node._lastTried;\r\n\r\n      // if the item has moved to another grid, we're done here\r\n      let target: GridItemHTMLElement = event.target as GridItemHTMLElement;\r\n      if (!target.gridstackNode || target.gridstackNode.grid !== this) return;\r\n\r\n      node.el = target;\r\n\r\n      if (node._isAboutToRemove) {\r\n        let gridToNotify = el.gridstackNode.grid;\r\n        if (gridToNotify._gsEventHandler[event.type]) {\r\n          gridToNotify._gsEventHandler[event.type](event, target);\r\n        }\r\n        this._removeDD(el);\r\n        gridToNotify.engine.removedNodes.push(node);\r\n        gridToNotify._triggerRemoveEvent();\r\n        // break circular links and remove DOM\r\n        delete el.gridstackNode;\r\n        delete node.el;\r\n        el.remove();\r\n      } else {\r\n        Utils.removePositioningStyles(target);\r\n        if (node._temporaryRemoved) {\r\n          // got removed - restore item back to before dragging position\r\n          Utils.copyPos(node, node._orig);// @ts-ignore\r\n          this._writePosAttr(target, node);\r\n          this.engine.addNode(node);\r\n        } else {\r\n          // move to new placeholder location\r\n          this._writePosAttr(target, node);\r\n        }\r\n        if (this._gsEventHandler[event.type]) {\r\n          this._gsEventHandler[event.type](event, target);\r\n        }\r\n      }\r\n      // @ts-ignore\r\n      this._extraDragRow = 0;// @ts-ignore\r\n      this._updateContainerHeight();// @ts-ignore\r\n      this._triggerChangeEvent();\r\n\r\n      this.engine.endUpdate();\r\n    }\r\n\r\n    dd.draggable(el, {\r\n      start: onStartMoving,\r\n      stop: onEndMoving,\r\n      drag: dragOrResize\r\n    }).resizable(el, {\r\n      start: onStartMoving,\r\n      stop: onEndMoving,\r\n      resize: dragOrResize\r\n    });\r\n    node._initDD = true; // we've set DD support now\r\n  }\r\n\r\n  // finally fine tune move vs resize by disabling any part...\r\n  dd.draggable(el, noMove ? 'disable' : 'enable')\r\n    .resizable(el, noResize ? 'disable' : 'enable');\r\n\r\n  return this;\r\n}\r\n\r\n/** @internal called when item is starting a drag/resize */\r\nGridStack.prototype._onStartMoving = function(this: GridStack, el: GridItemHTMLElement, event: Event, ui: DDUIData, node: GridStackNode, cellWidth: number, cellHeight: number) {\r\n  this.engine.cleanNodes()\r\n    .beginUpdate(node);\r\n  // @ts-ignore\r\n  this._writePosAttr(this.placeholder, node)\r\n  this.el.appendChild(this.placeholder);\r\n  // console.log('_onStartMoving placeholder') // TEST\r\n\r\n  node.el = this.placeholder;\r\n  node._lastUiPosition = ui.position;\r\n  node._prevYPix = ui.position.top;\r\n  node._moving = (event.type === 'dragstart'); // 'dropover' are not initially moving so they can go exactly where they enter (will push stuff out of the way)\r\n  delete node._lastTried;\r\n\r\n  if (event.type === 'dropover' && node._temporaryRemoved) {\r\n    // console.log('engine.addNode x=' + node.x); // TEST\r\n    this.engine.addNode(node); // will add, fix collisions, update attr and clear _temporaryRemoved\r\n    node._moving = true; // AFTER, mark as moving object (wanted fix location before)\r\n  }\r\n\r\n  // set the min/max resize info\r\n  this.engine.cacheRects(cellWidth, cellHeight, this.opts.marginTop as number, this.opts.marginRight as number, this.opts.marginBottom as number, this.opts.marginLeft as number);\r\n  if (event.type === 'resizestart') {\r\n    dd.resizable(el, 'option', 'minWidth', cellWidth * (node.minW || 1))\r\n      .resizable(el, 'option', 'minHeight', cellHeight * (node.minH || 1));\r\n    if (node.maxW) { dd.resizable(el, 'option', 'maxWidth', cellWidth * node.maxW); }\r\n    if (node.maxH) { dd.resizable(el, 'option', 'maxHeight', cellHeight * node.maxH); }\r\n  }\r\n}\r\n\r\n/** @internal called when item leaving our area by either cursor dropout event\r\n * or shape is outside our boundaries. remove it from us, and mark temporary if this was\r\n * our item to start with else restore prev node values from prev grid it came from.\r\n **/\r\nGridStack.prototype._leave = function(this: GridStack, el: GridItemHTMLElement, helper?: GridItemHTMLElement)  {\r\n  let node = el.gridstackNode;\r\n  if (!node) return;\r\n\r\n  dd.off(el, 'drag'); // no need to track while being outside\r\n\r\n  // this gets called when cursor leaves and shape is outside, so only do this once\r\n  if (node._temporaryRemoved) return;\r\n  node._temporaryRemoved = true;\r\n\r\n  this.engine.removeNode(node); // remove placeholder as well, otherwise it's a sign node is not in our list, which is a bigger issue\r\n  node.el = node._isExternal && helper ? helper : el; // point back to real item being dragged\r\n\r\n  if (this.opts.removable === true) { // boolean vs a class string\r\n    // item leaving us and we are supposed to remove on leave (no need to drag onto trash) mark it so\r\n    _itemRemoving(el, true);\r\n  }\r\n\r\n  // finally if item originally came from another grid, but left us, restore things back to prev info\r\n  if (el._gridstackNodeOrig) {\r\n    // console.log('leave delete _gridstackNodeOrig') // TEST\r\n    el.gridstackNode = el._gridstackNodeOrig;\r\n    delete el._gridstackNodeOrig;\r\n  } else if (node._isExternal) {\r\n    // item came from outside (like a toolbar) so nuke any node info\r\n    delete node.el;\r\n    delete el.gridstackNode;\r\n    // and restore all nodes back to original\r\n    this.engine.restoreInitial();\r\n  }\r\n}\r\n\r\n/** @internal called when item is being dragged/resized */\r\nGridStack.prototype._dragOrResize = function(this: GridStack, el: GridItemHTMLElement, event: Event, ui: DDUIData, node: GridStackNode, cellWidth: number, cellHeight: number)  {\r\n  let p = {...node._orig}; // could be undefined (_isExternal) which is ok (drag only set x,y and w,h will default to node value)\r\n  let resizing: boolean;\r\n  let mLeft = this.opts.marginLeft as number,\r\n    mRight = this.opts.marginRight as number,\r\n    mTop = this.opts.marginTop as number,\r\n    mBottom = this.opts.marginBottom as number;\r\n\r\n  // if margins (which are used to pass mid point by) are large relative to cell height/width, reduce them down #1855\r\n  let mHeight = Math.round(cellHeight * 0.1),\r\n    mWidth = Math.round(cellWidth * 0.1);\r\n  mLeft = Math.min(mLeft, mWidth);\r\n  mRight = Math.min(mRight, mWidth);\r\n  mTop = Math.min(mTop, mHeight);\r\n  mBottom = Math.min(mBottom, mHeight);\r\n\r\n  if (event.type === 'drag') {\r\n    if (node._temporaryRemoved) return; // handled by dropover\r\n    let distance = ui.position.top - node._prevYPix;\r\n    node._prevYPix = ui.position.top;\r\n    Utils.updateScrollPosition(el, ui.position, distance);\r\n\r\n    // get new position taking into account the margin in the direction we are moving! (need to pass mid point by margin)\r\n    let left = ui.position.left + (ui.position.left > node._lastUiPosition.left  ? -mRight : mLeft);\r\n    let top = ui.position.top + (ui.position.top > node._lastUiPosition.top  ? -mBottom : mTop);\r\n    p.x = Math.round(left / cellWidth);\r\n    p.y = Math.round(top / cellHeight);\r\n\r\n    // @ts-ignore// if we're at the bottom hitting something else, grow the grid so cursor doesn't leave when trying to place below others\r\n    let prev = this._extraDragRow;\r\n    if (this.engine.collide(node, p)) {\r\n      let row = this.getRow();\r\n      let extra = Math.max(0, (p.y + node.h) - row);\r\n      if (this.opts.maxRow && row + extra > this.opts.maxRow) {\r\n        extra = Math.max(0, this.opts.maxRow - row);\r\n      }// @ts-ignore\r\n      this._extraDragRow = extra;// @ts-ignore\r\n    } else this._extraDragRow = 0;// @ts-ignore\r\n    if (this._extraDragRow !== prev) this._updateContainerHeight();\r\n\r\n    if (node.x === p.x && node.y === p.y) return; // skip same\r\n    // DON'T skip one we tried as we might have failed because of coverage <50% before\r\n    // if (node._lastTried && node._lastTried.x === x && node._lastTried.y === y) return;\r\n  } else if (event.type === 'resize')  {\r\n    if (p.x < 0) return;\r\n    // Scrolling page if needed\r\n    Utils.updateScrollResize(event as MouseEvent, el, cellHeight);\r\n\r\n    // get new size\r\n    p.w = Math.round((ui.size.width - mLeft) / cellWidth);\r\n    p.h = Math.round((ui.size.height - mTop) / cellHeight);\r\n    if (node.w === p.w && node.h === p.h) return;\r\n    if (node._lastTried && node._lastTried.w === p.w && node._lastTried.h === p.h) return; // skip one we tried (but failed)\r\n\r\n    // if we size on left/top side this might move us, so get possible new position as well\r\n    let left = ui.position.left + mLeft;\r\n    let top = ui.position.top + mTop;\r\n    p.x = Math.round(left / cellWidth);\r\n    p.y = Math.round(top / cellHeight);\r\n\r\n    resizing = true;\r\n  }\r\n\r\n  node._lastTried = p; // set as last tried (will nuke if we go there)\r\n  let rect: GridStackPosition = { // screen pix of the dragged box\r\n    x: ui.position.left + mLeft,\r\n    y: ui.position.top + mTop,\r\n    w: (ui.size ? ui.size.width : node.w * cellWidth) - mLeft - mRight,\r\n    h: (ui.size ? ui.size.height : node.h * cellHeight) - mTop - mBottom\r\n  };\r\n  if (this.engine.moveNodeCheck(node, {...p, cellWidth, cellHeight, rect, resizing})) {\r\n    node._lastUiPosition = ui.position;\r\n    this.engine.cacheRects(cellWidth, cellHeight, mTop, mRight, mBottom, mLeft);\r\n    delete node._skipDown;\r\n    if (resizing && node.subGrid) { (node.subGrid as GridStack).onParentResize(); }// @ts-ignore\r\n    this._extraDragRow = 0;// @ts-ignore\r\n    this._updateContainerHeight();\r\n\r\n    let target = event.target as GridItemHTMLElement;// @ts-ignore\r\n    this._writePosAttr(target, node);\r\n    if (this._gsEventHandler[event.type]) {\r\n      this._gsEventHandler[event.type](event, target);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Enables/Disables moving.\r\n * @param els widget or selector to modify.\r\n * @param val if true widget will be draggable.\r\n */\r\nGridStack.prototype.movable = function(this: GridStack, els: GridStackElement, val: boolean): GridStack {\r\n  if (this.opts.staticGrid) return this; // can't move a static grid!\r\n  GridStack.getElements(els).forEach(el => {\r\n    let node = el.gridstackNode;\r\n    if (!node) return;\r\n    if (val) delete node.noMove; else node.noMove = true;\r\n    this._prepareDragDropByNode(node); // init DD if need be, and adjust\r\n  });\r\n  return this;\r\n}\r\n\r\n/**\r\n * Enables/Disables resizing.\r\n * @param els  widget or selector to modify\r\n * @param val  if true widget will be resizable.\r\n */\r\nGridStack.prototype.resizable = function(this: GridStack, els: GridStackElement, val: boolean): GridStack {\r\n  if (this.opts.staticGrid) return this; // can't resize a static grid!\r\n  GridStack.getElements(els).forEach(el => {\r\n    let node = el.gridstackNode;\r\n    if (!node) return;\r\n    if (val) delete node.noResize; else node.noResize = true;\r\n    this._prepareDragDropByNode(node); // init DD if need be, and adjust\r\n  });\r\n  return this;\r\n}\r\n\r\n/**\r\n  * Temporarily disables widgets moving/resizing.\r\n  * If you want a more permanent way (which freezes up resources) use `setStatic(true)` instead.\r\n  * Note: no-op for static grid\r\n  * This is a shortcut for:\r\n  * @example\r\n  *  grid.enableMove(false);\r\n  *  grid.enableResize(false);\r\n  */\r\nGridStack.prototype.disable = function(this: GridStack): GridStack {\r\n  if (this.opts.staticGrid) return;\r\n  this.enableMove(false);\r\n  this.enableResize(false);// @ts-ignore\r\n  this._triggerEvent('disable');\r\n  return this;\r\n}\r\n\r\n/**\r\n  * Re-enables widgets moving/resizing - see disable().\r\n  * Note: no-op for static grid.\r\n  * This is a shortcut for:\r\n  * @example\r\n  *  grid.enableMove(true);\r\n  *  grid.enableResize(true);\r\n  */\r\nGridStack.prototype.enable = function(this: GridStack): GridStack {\r\n  if (this.opts.staticGrid) return;\r\n  this.enableMove(true);\r\n  this.enableResize(true);// @ts-ignore\r\n  this._triggerEvent('enable');\r\n  return this;\r\n}\r\n\r\n/** Enables/disables widget moving. No-op for static grids. */\r\nGridStack.prototype.enableMove = function(this: GridStack, doEnable: boolean): GridStack {\r\n  if (this.opts.staticGrid) return this; // can't move a static grid!\r\n  this.opts.disableDrag = !doEnable; // FIRST before we update children as grid overrides #1658\r\n  this.engine.nodes.forEach(n => this.movable(n.el, doEnable));\r\n  return this;\r\n}\r\n\r\n/** Enables/disables widget resizing. No-op for static grids. */\r\nGridStack.prototype.enableResize = function(this: GridStack, doEnable: boolean): GridStack {\r\n  if (this.opts.staticGrid) return this; // can't size a static grid!\r\n  this.opts.disableResize = !doEnable; // FIRST before we update children as grid overrides #1658\r\n  this.engine.nodes.forEach(n => this.resizable(n.el, doEnable));\r\n  return this;\r\n}\r\n\r\n/** removes any drag&drop present (called during destroy) */\r\nGridStack.prototype._removeDD = function(this: GridStack, el: GridItemHTMLElement): GridStack {\r\n  dd.draggable(el, 'destroy').resizable(el, 'destroy');\r\n  if (el.gridstackNode) {\r\n    delete el.gridstackNode._initDD; // reset our DD init flag\r\n  }\r\n  return this;\r\n}\r\n\r\n","/**\n * dd-manager.ts 6.0.1\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\n */\n\nimport { DDDraggable } from './dd-draggable';\nimport { DDDroppable } from './dd-droppable';\nimport { DDResizable } from './dd-resizable';\n\n/**\n * globals that are shared across Drag & Drop instances\n */\nexport class DDManager {\n  /** true if a mouse down event was handled */\n  public static mouseHandled: boolean;\n\n  /** item being dragged */\n  public static dragElement: DDDraggable;\n\n  /** item we are currently over as drop target */\n  public static dropElement: DDDroppable;\n\n  /** current item we're over for resizing purpose (ignore nested grid resize handles) */\n  public static overResizeElement: DDResizable;\n\n}\n","/**\n * dd-resizable-handle.ts 6.0.1\n * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license\n */\n\nimport { isTouch, pointerdown, touchend, touchmove, touchstart } from './dd-touch';\n\nexport interface DDResizableHandleOpt {\n  start?: (event) => void;\n  move?: (event) => void;\n  stop?: (event) => void;\n}\n\nexport class DDResizableHandle {\n  /** @internal */\n  protected el: HTMLElement;\n  /** @internal */\n  protected host: HTMLElement;\n  /** @internal */\n  protected option: DDResizableHandleOpt;\n  /** @internal */\n  protected dir: string;\n  /** @internal true after we've moved enough pixels to start a resize */\n  protected moving = false;\n  /** @internal */\n  protected mouseDownEvent: MouseEvent;\n  /** @internal */\n  protected static prefix = 'ui-resizable-';\n\n  constructor(host: HTMLElement, direction: string, option: DDResizableHandleOpt) {\n    this.host = host;\n    this.dir = direction;\n    this.option = option;\n    // create var event binding so we can easily remove and still look like TS methods (unlike anonymous functions)\n    this._mouseDown = this._mouseDown.bind(this);\n    this._mouseMove = this._mouseMove.bind(this);\n    this._mouseUp = this._mouseUp.bind(this);\n\n    this._init();\n  }\n\n  /** @internal */\n  protected _init(): DDResizableHandle {\n    const el = document.createElement('div');\n    el.classList.add('ui-resizable-handle');\n    el.classList.add(`${DDResizableHandle.prefix}${this.dir}`);\n    el.style.zIndex = '100';\n    el.style.userSelect = 'none';\n    this.el = el;\n    this.host.appendChild(this.el);\n    this.el.addEventListener('mousedown', this._mouseDown);\n    if (isTouch) {\n      this.el.addEventListener('touchstart', touchstart);\n      this.el.addEventListener('pointerdown', pointerdown);\n      // this.el.style.touchAction = 'none'; // not needed unlike pointerdown doc comment\n    }\n    return this;\n  }\n\n  /** call this when resize handle needs to be removed and cleaned up */\n  public destroy(): DDResizableHandle {\n    if (this.moving) this._mouseUp(this.mouseDownEvent);\n    this.el.removeEventListener('mousedown', this._mouseDown);\n    if (isTouch) {\n      this.el.removeEventListener('touchstart', touchstart);\n      this.el.removeEventListener('pointerdown', pointerdown);\n    }\n    this.host.removeChild(this.el);\n    delete this.el;\n    delete this.host;\n    return this;\n  }\n\n  /** @internal called on mouse down on us: capture move on the entire document (mouse might not stay on us) until we release the mouse */\n  protected _mouseDown(e: MouseEvent) {\n    this.mouseDownEvent = e;\n    document.addEventListener('mousemove', this._mouseMove, true); // capture, not bubble\n    document.addEventListener('mouseup', this._mouseUp, true);\n    if (isTouch) {\n      this.el.addEventListener('touchmove', touchmove);\n      this.el.addEventListener('touchend', touchend);\n    }\n    e.stopPropagation();\n    e.preventDefault();\n  }\n\n  /** @internal */\n  protected _mouseMove(e: MouseEvent) {\n    let s = this.mouseDownEvent;\n    if (this.moving) {\n      this._triggerEvent('move', e);\n    } else if (Math.abs(e.x - s.x) + Math.abs(e.y - s.y) > 2) {\n      // don't start unless we've moved at least 3 pixels\n      this.moving = true;\n      this._triggerEvent('start', this.mouseDownEvent);\n      this._triggerEvent('move', e);\n    }\n    e.stopPropagation();\n    e.preventDefault();\n  }\n\n  /** @internal */\n  protected _mouseUp(e: MouseEvent) {\n    if (this.moving) {\n      this._triggerEvent('stop', e);\n    }\n    document.removeEventListener('mousemove', this._mouseMove, true);\n    document.removeEventListener('mouseup', this._mouseUp, true);\n    if (isTouch) {\n      this.el.removeEventListener('touchmove', touchmove);\n      this.el.removeEventListener('touchend', touchend);\n    }\n    delete this.moving;\n    delete this.mouseDownEvent;\n    e.stopPropagation();\n    e.preventDefault();\n  }\n\n  /** @internal */\n  protected _triggerEvent(name: string, event: MouseEvent): DDResizableHandle {\n    if (this.option[name]) this.option[name](event);\n    return this;\n  }\n}\n","/**\n * dd-resizable.ts 6.0.1\n * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license\n */\n\nimport { DDResizableHandle } from './dd-resizable-handle';\nimport { DDBaseImplement, HTMLElementExtendOpt } from './dd-base-impl';\nimport { Utils } from './utils';\nimport { DDUIData, Rect, Size } from './types';\nimport { DDManager } from './dd-manager';\n\n// import { GridItemHTMLElement } from './types'; let count = 0; // TEST\n\n// TODO: merge with DDDragOpt\nexport interface DDResizableOpt {\n  autoHide?: boolean;\n  handles?: string;\n  maxHeight?: number;\n  maxWidth?: number;\n  minHeight?: number;\n  minWidth?: number;\n  start?: (event: Event, ui: DDUIData) => void;\n  stop?: (event: Event) => void;\n  resize?: (event: Event, ui: DDUIData) => void;\n}\n\nexport class DDResizable extends DDBaseImplement implements HTMLElementExtendOpt<DDResizableOpt> {\n\n  // have to be public else complains for HTMLElementExtendOpt ?\n  public el: HTMLElement;\n  public option: DDResizableOpt;\n\n  /** @internal */\n  protected handlers: DDResizableHandle[];\n  /** @internal */\n  protected originalRect: Rect;\n  /** @internal */\n  protected temporalRect: Rect;\n  /** @internal */\n  protected scrollY: number;\n  /** @internal */\n  protected scrolled: number;\n  /** @internal */\n  protected scrollEl: HTMLElement;\n  /** @internal */\n  protected startEvent: MouseEvent;\n  /** @internal value saved in the same order as _originStyleProp[] */\n  protected elOriginStyleVal: string[];\n  /** @internal */\n  protected parentOriginStylePosition: string;\n  /** @internal */\n  protected static _originStyleProp = ['width', 'height', 'position', 'left', 'top', 'opacity', 'zIndex'];\n\n  constructor(el: HTMLElement, opts: DDResizableOpt = {}) {\n    super();\n    this.el = el;\n    this.option = opts;\n    // create var event binding so we can easily remove and still look like TS methods (unlike anonymous functions)\n    this._mouseOver = this._mouseOver.bind(this);\n    this._mouseOut = this._mouseOut.bind(this);\n    this.enable();\n    this._setupAutoHide(this.option.autoHide);\n    this._setupHandlers();\n  }\n\n  public on(event: 'resizestart' | 'resize' | 'resizestop', callback: (event: DragEvent) => void): void {\n    super.on(event, callback);\n  }\n\n  public off(event: 'resizestart' | 'resize' | 'resizestop'): void {\n    super.off(event);\n  }\n\n  public enable(): void {\n    super.enable();\n    this.el.classList.add('ui-resizable');\n    this.el.classList.remove('ui-resizable-disabled');\n    this._setupAutoHide(this.option.autoHide);\n  }\n\n  public disable(): void {\n    super.disable();\n    this.el.classList.add('ui-resizable-disabled');\n    this.el.classList.remove('ui-resizable');\n    this._setupAutoHide(false);\n  }\n\n  public destroy(): void {\n    this._removeHandlers();\n    this._setupAutoHide(false);\n    this.el.classList.remove('ui-resizable');\n    delete this.el;\n    super.destroy();\n  }\n\n  public updateOption(opts: DDResizableOpt): DDResizable {\n    let updateHandles = (opts.handles && opts.handles !== this.option.handles);\n    let updateAutoHide = (opts.autoHide && opts.autoHide !== this.option.autoHide);\n    Object.keys(opts).forEach(key => this.option[key] = opts[key]);\n    if (updateHandles) {\n      this._removeHandlers();\n      this._setupHandlers();\n    }\n    if (updateAutoHide) {\n      this._setupAutoHide(this.option.autoHide);\n    }\n    return this;\n  }\n\n  /** @internal turns auto hide on/off */\n  protected _setupAutoHide(auto: boolean): DDResizable {\n    if (auto) {\n      this.el.classList.add('ui-resizable-autohide');\n      // use mouseover and not mouseenter to get better performance and track for nested cases\n      this.el.addEventListener('mouseover', this._mouseOver);\n      this.el.addEventListener('mouseout', this._mouseOut);\n    } else {\n      this.el.classList.remove('ui-resizable-autohide');\n      this.el.removeEventListener('mouseover', this._mouseOver);\n      this.el.removeEventListener('mouseout', this._mouseOut);\n    }\n    return this;\n  }\n\n  /** @internal */\n  protected _mouseOver(e: Event) {\n    // console.log(`${count++} pre-enter ${(this.el as GridItemHTMLElement).gridstackNode._id}`)\n    // already over a child, ignore. Ideally we just call e.stopPropagation() but see https://github.com/gridstack/gridstack.js/issues/2018\n    if (DDManager.overResizeElement || DDManager.dragElement) return;\n    DDManager.overResizeElement = this;\n    // console.log(`${count++} enter ${(this.el as GridItemHTMLElement).gridstackNode._id}`)\n    this.el.classList.remove('ui-resizable-autohide');\n  }\n\n  /** @internal */\n  protected _mouseOut(e: Event) {\n    // console.log(`${count++} pre-leave ${(this.el as GridItemHTMLElement).gridstackNode._id}`)\n    if (DDManager.overResizeElement !== this) return;\n    delete DDManager.overResizeElement;\n    // console.log(`${count++} leave ${(this.el as GridItemHTMLElement).gridstackNode._id}`)\n    this.el.classList.add('ui-resizable-autohide');\n  }\n\n  /** @internal */\n  protected _setupHandlers(): DDResizable {\n    let handlerDirection = this.option.handles || 'e,s,se';\n    if (handlerDirection === 'all') {\n      handlerDirection = 'n,e,s,w,se,sw,ne,nw';\n    }\n    this.handlers = handlerDirection.split(',')\n      .map(dir => dir.trim())\n      .map(dir => new DDResizableHandle(this.el, dir, {\n        start: (event: MouseEvent) => {\n          this._resizeStart(event);\n        },\n        stop: (event: MouseEvent) => {\n          this._resizeStop(event);\n        },\n        move: (event: MouseEvent) => {\n          this._resizing(event, dir);\n        }\n      }));\n    return this;\n  }\n\n  /** @internal */\n  protected _resizeStart(event: MouseEvent): DDResizable {\n    this.originalRect = this.el.getBoundingClientRect();\n    this.scrollEl = Utils.getScrollElement(this.el);\n    this.scrollY = this.scrollEl.scrollTop;\n    this.scrolled = 0;\n    this.startEvent = event;\n    this._setupHelper();\n    this._applyChange();\n    const ev = Utils.initEvent<MouseEvent>(event, { type: 'resizestart', target: this.el });\n    if (this.option.start) {\n      this.option.start(ev, this._ui());\n    }\n    this.el.classList.add('ui-resizable-resizing');\n    this.triggerEvent('resizestart', ev);\n    return this;\n  }\n\n  /** @internal */\n  protected _resizing(event: MouseEvent, dir: string): DDResizable {\n    this.scrolled = this.scrollEl.scrollTop - this.scrollY;\n    this.temporalRect = this._getChange(event, dir);\n    this._applyChange();\n    const ev = Utils.initEvent<MouseEvent>(event, { type: 'resize', target: this.el });\n    if (this.option.resize) {\n      this.option.resize(ev, this._ui());\n    }\n    this.triggerEvent('resize', ev);\n    return this;\n  }\n\n  /** @internal */\n  protected _resizeStop(event: MouseEvent): DDResizable {\n    const ev = Utils.initEvent<MouseEvent>(event, { type: 'resizestop', target: this.el });\n    if (this.option.stop) {\n      this.option.stop(ev); // Note: ui() not used by gridstack so don't pass\n    }\n    this.el.classList.remove('ui-resizable-resizing');\n    this.triggerEvent('resizestop', ev);\n    this._cleanHelper();\n    delete this.startEvent;\n    delete this.originalRect;\n    delete this.temporalRect;\n    delete this.scrollY;\n    delete this.scrolled;\n    return this;\n  }\n\n  /** @internal */\n  protected _setupHelper(): DDResizable {\n    this.elOriginStyleVal = DDResizable._originStyleProp.map(prop => this.el.style[prop]);\n    this.parentOriginStylePosition = this.el.parentElement.style.position;\n    if (window.getComputedStyle(this.el.parentElement).position.match(/static/)) {\n      this.el.parentElement.style.position = 'relative';\n    }\n    this.el.style.position = 'absolute';\n    this.el.style.opacity = '0.8';\n    return this;\n  }\n\n  /** @internal */\n  protected _cleanHelper(): DDResizable {\n    DDResizable._originStyleProp.forEach((prop, i) => {\n      this.el.style[prop] = this.elOriginStyleVal[i] || null;\n    });\n    this.el.parentElement.style.position = this.parentOriginStylePosition || null;\n    return this;\n  }\n\n  /** @internal */\n  protected _getChange(event: MouseEvent, dir: string): Rect {\n    const oEvent = this.startEvent;\n    const newRect = { // Note: originalRect is a complex object, not a simple Rect, so copy out.\n      width: this.originalRect.width,\n      height: this.originalRect.height + this.scrolled,\n      left: this.originalRect.left,\n      top: this.originalRect.top - this.scrolled\n    };\n\n    const offsetX = event.clientX - oEvent.clientX;\n    const offsetY = event.clientY - oEvent.clientY;\n\n    if (dir.indexOf('e') > -1) {\n      newRect.width += offsetX;\n    } else if (dir.indexOf('w') > -1) {\n      newRect.width -= offsetX;\n      newRect.left += offsetX;\n    }\n    if (dir.indexOf('s') > -1) {\n      newRect.height += offsetY;\n    } else if (dir.indexOf('n') > -1) {\n      newRect.height -= offsetY;\n      newRect.top += offsetY\n    }\n    const constrain = this._constrainSize(newRect.width, newRect.height);\n    if (Math.round(newRect.width) !== Math.round(constrain.width)) { // round to ignore slight round-off errors\n      if (dir.indexOf('w') > -1) {\n        newRect.left += newRect.width - constrain.width;\n      }\n      newRect.width = constrain.width;\n    }\n    if (Math.round(newRect.height) !== Math.round(constrain.height)) {\n      if (dir.indexOf('n') > -1) {\n        newRect.top += newRect.height - constrain.height;\n      }\n      newRect.height = constrain.height;\n    }\n    return newRect;\n  }\n\n  /** @internal constrain the size to the set min/max values */\n  protected _constrainSize(oWidth: number, oHeight: number): Size {\n    const maxWidth = this.option.maxWidth || Number.MAX_SAFE_INTEGER;\n    const minWidth = this.option.minWidth || oWidth;\n    const maxHeight = this.option.maxHeight || Number.MAX_SAFE_INTEGER;\n    const minHeight = this.option.minHeight || oHeight;\n    const width = Math.min(maxWidth, Math.max(minWidth, oWidth));\n    const height = Math.min(maxHeight, Math.max(minHeight, oHeight));\n    return { width, height };\n  }\n\n  /** @internal */\n  protected _applyChange(): DDResizable {\n    let containmentRect = { left: 0, top: 0, width: 0, height: 0 };\n    if (this.el.style.position === 'absolute') {\n      const containmentEl = this.el.parentElement;\n      const { left, top } = containmentEl.getBoundingClientRect();\n      containmentRect = { left, top, width: 0, height: 0 };\n    }\n    if (!this.temporalRect) return this;\n    Object.keys(this.temporalRect).forEach(key => {\n      const value = this.temporalRect[key];\n      this.el.style[key] = value - containmentRect[key] + 'px';\n    });\n    return this;\n  }\n\n  /** @internal */\n  protected _removeHandlers(): DDResizable {\n    this.handlers.forEach(handle => handle.destroy());\n    delete this.handlers;\n    return this;\n  }\n\n  /** @internal */\n  protected _ui = (): DDUIData => {\n    const containmentEl = this.el.parentElement;\n    const containmentRect = containmentEl.getBoundingClientRect();\n    const newRect = { // Note: originalRect is a complex object, not a simple Rect, so copy out.\n      width: this.originalRect.width,\n      height: this.originalRect.height + this.scrolled,\n      left: this.originalRect.left,\n      top: this.originalRect.top - this.scrolled\n    };\n    const rect = this.temporalRect || newRect;\n    return {\n      position: {\n        left: rect.left - containmentRect.left,\n        top: rect.top - containmentRect.top\n      },\n      size: {\n        width: rect.width,\n        height: rect.height\n      }\n      /* Gridstack ONLY needs position set above... keep around in case.\n      element: [this.el], // The object representing the element to be resized\n      helper: [], // TODO: not support yet - The object representing the helper that's being resized\n      originalElement: [this.el],// we don't wrap here, so simplify as this.el //The object representing the original element before it is wrapped\n      originalPosition: { // The position represented as { left, top } before the resizable is resized\n        left: this.originalRect.left - containmentRect.left,\n        top: this.originalRect.top - containmentRect.top\n      },\n      originalSize: { // The size represented as { width, height } before the resizable is resized\n        width: this.originalRect.width,\n        height: this.originalRect.height\n      }\n      */\n    };\n  }\n}\n","/**\n * touch.ts 6.0.1\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\n */\n\nimport { DDManager } from './dd-manager';\n\n/**\n * Detect touch support - Windows Surface devices and other touch devices\n * should we use this instead ? (what we had for always showing resize handles)\n * /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)\n */\nexport const isTouch: boolean = ( 'ontouchstart' in document\n  || 'ontouchstart' in window\n  // || !!window.TouchEvent // true on Windows 10 Chrome desktop so don't use this\n  || ((window as any).DocumentTouch && document instanceof (window as any).DocumentTouch)\n  || navigator.maxTouchPoints > 0\n  || (navigator as any).msMaxTouchPoints > 0\n);\n\n// interface TouchCoord {x: number, y: number};\n\nclass DDTouch {\n  public static touchHandled: boolean;\n  public static pointerLeaveTimeout: number;\n}\n\n/**\n* Get the x,y position of a touch event\n*/\n// function getTouchCoords(e: TouchEvent): TouchCoord {\n//   return {\n//     x: e.changedTouches[0].pageX,\n//     y: e.changedTouches[0].pageY\n//   };\n// }\n\n/**\n * Simulate a mouse event based on a corresponding touch event\n * @param {Object} e A touch event\n * @param {String} simulatedType The corresponding mouse event\n */\nfunction simulateMouseEvent(e: TouchEvent, simulatedType: string) {\n\n  // Ignore multi-touch events\n  if (e.touches.length > 1) return;\n\n  // Prevent \"Ignored attempt to cancel a touchmove event with cancelable=false\" errors\n  if (e.cancelable) e.preventDefault();\n\n  const touch = e.changedTouches[0], simulatedEvent = document.createEvent('MouseEvents');\n\n  // Initialize the simulated mouse event using the touch event's coordinates\n  simulatedEvent.initMouseEvent(\n    simulatedType,    // type\n    true,             // bubbles\n    true,             // cancelable\n    window,           // view\n    1,                // detail\n    touch.screenX,    // screenX\n    touch.screenY,    // screenY\n    touch.clientX,    // clientX\n    touch.clientY,    // clientY\n    false,            // ctrlKey\n    false,            // altKey\n    false,            // shiftKey\n    false,            // metaKey\n    0,                // button\n    null              // relatedTarget\n  );\n\n  // Dispatch the simulated event to the target element\n  e.target.dispatchEvent(simulatedEvent);\n}\n\n/**\n * Simulate a mouse event based on a corresponding Pointer event\n * @param {Object} e A pointer event\n * @param {String} simulatedType The corresponding mouse event\n */\nfunction simulatePointerMouseEvent(e: PointerEvent, simulatedType: string) {\n\n  // Prevent \"Ignored attempt to cancel a touchmove event with cancelable=false\" errors\n  if (e.cancelable) e.preventDefault();\n\n  const simulatedEvent = document.createEvent('MouseEvents');\n\n  // Initialize the simulated mouse event using the touch event's coordinates\n  simulatedEvent.initMouseEvent(\n    simulatedType,    // type\n    true,             // bubbles\n    true,             // cancelable\n    window,           // view\n    1,                // detail\n    e.screenX,    // screenX\n    e.screenY,    // screenY\n    e.clientX,    // clientX\n    e.clientY,    // clientY\n    false,            // ctrlKey\n    false,            // altKey\n    false,            // shiftKey\n    false,            // metaKey\n    0,                // button\n    null              // relatedTarget\n  );\n\n  // Dispatch the simulated event to the target element\n  e.target.dispatchEvent(simulatedEvent);\n}\n\n\n/**\n * Handle the touchstart events\n * @param {Object} e The widget element's touchstart event\n */\nexport function touchstart(e: TouchEvent) {\n  // Ignore the event if another widget is already being handled\n  if (DDTouch.touchHandled) return;  DDTouch.touchHandled = true;\n\n  // Simulate the mouse events\n  // simulateMouseEvent(e, 'mouseover');\n  // simulateMouseEvent(e, 'mousemove');\n  simulateMouseEvent(e, 'mousedown');\n}\n\n/**\n * Handle the touchmove events\n * @param {Object} e The document's touchmove event\n */\nexport function touchmove(e: TouchEvent) {\n  // Ignore event if not handled by us\n  if (!DDTouch.touchHandled)  return;\n\n  simulateMouseEvent(e, 'mousemove');\n}\n\n/**\n * Handle the touchend events\n * @param {Object} e The document's touchend event\n */\nexport function touchend(e: TouchEvent) {\n\n  // Ignore event if not handled\n  if (!DDTouch.touchHandled) return;\n\n  // cancel delayed leave event when we release on ourself which happens BEFORE we get this!\n  if (DDTouch.pointerLeaveTimeout) {\n    window.clearTimeout(DDTouch.pointerLeaveTimeout);\n    delete DDTouch.pointerLeaveTimeout;\n  }\n\n  const wasDragging = !!DDManager.dragElement;\n\n  // Simulate the mouseup event\n  simulateMouseEvent(e, 'mouseup');\n  // simulateMouseEvent(event, 'mouseout');\n\n  // If the touch interaction did not move, it should trigger a click\n  if (!wasDragging) {\n    simulateMouseEvent(e, 'click');\n  }\n\n  // Unset the flag to allow other widgets to inherit the touch event\n  DDTouch.touchHandled = false;\n}\n\n/**\n * Note we don't get touchenter/touchleave (which are deprecated)\n * see https://stackoverflow.com/questions/27908339/js-touch-equivalent-for-mouseenter\n * so instead of PointerEvent to still get enter/leave and send the matching mouse event.\n */\nexport function pointerdown(e: PointerEvent) {\n  (e.target as HTMLElement).releasePointerCapture(e.pointerId) // <- Important!\n}\n\nexport function pointerenter(e: PointerEvent) {\n  // ignore the initial one we get on pointerdown on ourself\n  if (!DDManager.dragElement) {\n    // console.log('pointerenter ignored');\n    return;\n  }\n  // console.log('pointerenter');\n  simulatePointerMouseEvent(e, 'mouseenter');\n}\n\nexport function pointerleave(e: PointerEvent) {\n  // ignore the leave on ourself we get before releasing the mouse over ourself\n  // by delaying sending the event and having the up event cancel us\n  if (!DDManager.dragElement) {\n    // console.log('pointerleave ignored');\n    return;\n  }\n  DDTouch.pointerLeaveTimeout = window.setTimeout(() => {\n    delete DDTouch.pointerLeaveTimeout;\n    // console.log('pointerleave delayed');\n    simulatePointerMouseEvent(e, 'mouseleave');\n  }, 10);\n}\n\n","/**\n * gridstack-engine.ts 6.0.1\n * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license\n */\n\nimport { Utils } from './utils';\nimport { GridStackNode, ColumnOptions, GridStackPosition, GridStackMoveOpts } from './types';\n\n/** callback to update the DOM attributes since this class is generic (no HTML or other info) for items that changed - see _notify() */\ntype OnChangeCB = (nodes: GridStackNode[]) => void;\n\n/** options used during creation - similar to GridStackOptions */\nexport interface GridStackEngineOptions {\n  column?: number;\n  maxRow?: number;\n  float?: boolean;\n  nodes?: GridStackNode[];\n  onChange?: OnChangeCB;\n}\n\n/**\n * Defines the GridStack engine that does most no DOM grid manipulation.\n * See GridStack methods and vars for descriptions.\n *\n * NOTE: values should not be modified directly - call the main GridStack API instead\n */\nexport class GridStackEngine {\n  public column: number;\n  public maxRow: number;\n  public nodes: GridStackNode[];\n  public addedNodes: GridStackNode[] = [];\n  public removedNodes: GridStackNode[] = [];\n  public batchMode: boolean;\n  /** @internal callback to update the DOM attributes */\n  protected onChange: OnChangeCB;\n  /** @internal */\n  protected _float: boolean;\n  /** @internal */\n  protected _prevFloat: boolean;\n  /** @internal cached layouts of difference column count so we can restore ack (eg 12 -> 1 -> 12) */\n  protected _layouts?: GridStackNode[][]; // maps column # to array of values nodes\n  /** @internal true while we are resizing widgets during column resize to skip certain parts */\n  protected _inColumnResize: boolean;\n  /** @internal true if we have some items locked */\n  protected _hasLocked: boolean;\n  /** @internal unique global internal _id counter NOT starting at 0 */\n  protected static _idSeq = 1;\n\n  public constructor(opts: GridStackEngineOptions = {}) {\n    this.column = opts.column || 12;\n    this.maxRow = opts.maxRow;\n    this._float = opts.float;\n    this.nodes = opts.nodes || [];\n    this.onChange = opts.onChange;\n  }\n\n  public batchUpdate(flag = true): GridStackEngine {\n    if (!!this.batchMode === flag) return this;\n    this.batchMode = flag;\n    if (flag) {\n      this._prevFloat = this._float;\n      this._float = true; // let things go anywhere for now... will restore and possibly reposition later\n      this.saveInitial(); // since begin update (which is called multiple times) won't do this\n    } else {\n      this._float = this._prevFloat;\n      delete this._prevFloat;\n      this._packNodes()._notify();\n    }\n    return this;\n  }\n\n  // use entire row for hitting area (will use bottom reverse sorted first) if we not actively moving DOWN and didn't already skip\n  protected _useEntireRowArea(node: GridStackNode, nn: GridStackPosition): boolean {\n    return !this.float && !this._hasLocked && (!node._moving || node._skipDown || nn.y <= node.y);\n  }\n\n  /** @internal fix collision on given 'node', going to given new location 'nn', with optional 'collide' node already found.\n   * return true if we moved. */\n  protected _fixCollisions(node: GridStackNode, nn = node, collide?: GridStackNode, opt: GridStackMoveOpts = {}): boolean {\n    this.sortNodes(-1); // from last to first, so recursive collision move items in the right order\n\n    collide = collide || this.collide(node, nn); // REAL area collide for swap and skip if none...\n    if (!collide) return false;\n\n    // swap check: if we're actively moving in gravity mode, see if we collide with an object the same size\n    if (node._moving && !opt.nested && !this.float) {\n      if (this.swap(node, collide)) return true;\n    }\n\n    // during while() collisions MAKE SURE to check entire row so larger items don't leap frog small ones (push them all down starting last in grid)\n    let area = nn;\n    if (this._useEntireRowArea(node, nn)) {\n      area = {x: 0, w: this.column, y: nn.y, h: nn.h};\n      collide = this.collide(node, area, opt.skip); // force new hit\n    }\n\n    let didMove = false;\n    let newOpt: GridStackMoveOpts = {nested: true, pack: false};\n    while (collide = collide || this.collide(node, area, opt.skip)) { // could collide with more than 1 item... so repeat for each\n      let moved: boolean;\n      // if colliding with a locked item OR moving down with top gravity (and collide could move up) -> skip past the collide,\n      // but remember that skip down so we only do this once (and push others otherwise).\n      if (collide.locked || node._moving && !node._skipDown && nn.y > node.y && !this.float &&\n        // can take space we had, or before where we're going\n        (!this.collide(collide, {...collide, y: node.y}, node) || !this.collide(collide, {...collide, y: nn.y - collide.h}, node))) {\n        node._skipDown = (node._skipDown || nn.y > node.y);\n        moved = this.moveNode(node, {...nn, y: collide.y + collide.h, ...newOpt});\n        if (collide.locked && moved) {\n          Utils.copyPos(nn, node); // moving after lock become our new desired location\n        } else if (!collide.locked && moved && opt.pack) {\n          // we moved after and will pack: do it now and keep the original drop location, but past the old collide to see what else we might push way\n          this._packNodes();\n          nn.y = collide.y + collide.h;\n          Utils.copyPos(node, nn);\n        }\n        didMove = didMove || moved;\n      } else {\n        // move collide down *after* where we will be, ignoring where we are now (don't collide with us)\n        moved = this.moveNode(collide, {...collide, y: nn.y + nn.h, skip: node, ...newOpt});\n      }\n      if (!moved) { return didMove; } // break inf loop if we couldn't move after all (ex: maxRow, fixed)\n      collide = undefined;\n    }\n    return didMove;\n  }\n\n  /** return the nodes that intercept the given node. Optionally a different area can be used, as well as a second node to skip */\n  public collide(skip: GridStackNode, area = skip, skip2?: GridStackNode): GridStackNode {\n    return this.nodes.find(n => n !== skip && n !== skip2 && Utils.isIntercepted(n, area));\n  }\n  public collideAll(skip: GridStackNode, area = skip, skip2?: GridStackNode): GridStackNode[] {\n    return this.nodes.filter(n => n !== skip && n !== skip2 && Utils.isIntercepted(n, area));\n  }\n\n  /** does a pixel coverage collision, returning the node that has the most coverage that is >50% mid line */\n  public collideCoverage(node: GridStackNode, o: GridStackMoveOpts, collides: GridStackNode[]): GridStackNode {\n    if (!o.rect || !node._rect) return;\n    let r0 = node._rect; // where started\n    let r = {...o.rect}; // where we are\n\n    // update dragged rect to show where it's coming from (above or below, etc...)\n    if (r.y > r0.y) {\n      r.h += r.y - r0.y;\n      r.y = r0.y;\n    } else {\n      r.h += r0.y - r.y;\n    }\n    if (r.x > r0.x) {\n      r.w += r.x - r0.x;\n      r.x = r0.x;\n    } else {\n      r.w += r0.x - r.x;\n    }\n\n    let collide: GridStackNode;\n    collides.forEach(n => {\n      if (n.locked || !n._rect) return;\n      let r2 = n._rect; // overlapping target\n      let yOver = Number.MAX_VALUE, xOver = Number.MAX_VALUE, overMax = 0.5; // need >50%\n      // depending on which side we started from, compute the overlap % of coverage\n      // (ex: from above/below we only compute the max horizontal line coverage)\n      if (r0.y < r2.y) { // from above\n        yOver = ((r.y + r.h) - r2.y) / r2.h;\n      } else if (r0.y+r0.h > r2.y+r2.h) { // from below\n        yOver = ((r2.y + r2.h) - r.y) / r2.h;\n      }\n      if (r0.x < r2.x) { // from the left\n        xOver = ((r.x + r.w) - r2.x) / r2.w;\n      } else if (r0.x+r0.w > r2.x+r2.w) { // from the right\n        xOver = ((r2.x + r2.w) - r.x) / r2.w;\n      }\n      let over = Math.min(xOver, yOver);\n      if (over > overMax) {\n        overMax = over;\n        collide = n;\n      }\n    });\n    return collide;\n  }\n\n  /** called to cache the nodes pixel rectangles used for collision detection during drag */\n  public cacheRects(w: number, h: number, top: number, right: number, bottom: number, left: number): GridStackEngine\n  {\n    this.nodes.forEach(n =>\n      n._rect = {\n        y: n.y * h + top,\n        x: n.x * w + left,\n        w: n.w * w - left - right,\n        h: n.h * h - top - bottom\n      }\n    );\n    return this;\n  }\n\n  /** called to possibly swap between 2 nodes (same size or column, not locked, touching), returning true if successful */\n  public swap(a: GridStackNode, b: GridStackNode): boolean {\n    if (!b || b.locked || !a || a.locked) return false;\n\n    function _doSwap(): true { // assumes a is before b IFF they have different height (put after rather than exact swap)\n      let x = b.x, y = b.y;\n      b.x = a.x; b.y = a.y; // b -> a position\n      if (a.h != b.h) {\n        a.x = x; a.y = b.y + b.h; // a -> goes after b\n      } else if (a.w != b.w) {\n        a.x = b.x + b.w; a.y = y; // a -> goes after b\n      } else {\n        a.x = x; a.y = y; // a -> old b position\n      }\n      a._dirty = b._dirty = true;\n      return true;\n    }\n    let touching: boolean; // remember if we called it (vs undefined)\n\n    // same size and same row or column, and touching\n    if (a.w === b.w && a.h === b.h && (a.x === b.x || a.y === b.y) && (touching = Utils.isTouching(a, b)))\n      return _doSwap();\n    if (touching === false) return; // IFF ran test and fail, bail out\n\n    // check for taking same columns (but different height) and touching\n    if (a.w === b.w && a.x === b.x && (touching || (touching = Utils.isTouching(a, b)))) {\n      if (b.y < a.y) { let t = a; a = b; b = t; } // swap a <-> b vars so a is first\n      return _doSwap();\n    }\n    if (touching === false) return;\n\n    // check if taking same row (but different width) and touching\n    if (a.h === b.h && a.y === b.y && (touching || (touching = Utils.isTouching(a, b)))) {\n      if (b.x < a.x) { let t = a; a = b; b = t; } // swap a <-> b vars so a is first\n      return _doSwap();\n    }\n    return false;\n  }\n\n  public isAreaEmpty(x: number, y: number, w: number, h: number): boolean {\n    let nn: GridStackNode = {x: x || 0, y: y || 0, w: w || 1, h: h || 1};\n    return !this.collide(nn);\n  }\n\n  /** re-layout grid items to reclaim any empty space */\n  public compact(): GridStackEngine {\n    if (this.nodes.length === 0) return this;\n    this.batchUpdate()\n      .sortNodes();\n    let copyNodes = this.nodes;\n    this.nodes = []; // pretend we have no nodes to conflict layout to start with...\n    copyNodes.forEach(node => {\n      if (!node.locked) {\n        node.autoPosition = true;\n      }\n      this.addNode(node, false); // 'false' for add event trigger\n      node._dirty = true; // will force attr update\n    });\n    return this.batchUpdate(false);\n  }\n\n  /** enable/disable floating widgets (default: `false`) See [example](http://gridstackjs.com/demo/float.html) */\n  public set float(val: boolean) {\n    if (this._float === val) return;\n    this._float = val || false;\n    if (!val) {\n      this._packNodes()._notify();\n    }\n  }\n\n  /** float getter method */\n  public get float(): boolean { return this._float || false; }\n\n  /** sort the nodes array from first to last, or reverse. Called during collision/placement to force an order */\n  public sortNodes(dir?: -1 | 1): GridStackEngine {\n    this.nodes = Utils.sort(this.nodes, dir, this.column);\n    return this;\n  }\n\n  /** @internal called to top gravity pack the items back OR revert back to original Y positions when floating */\n  protected _packNodes(): GridStackEngine {\n    if (this.batchMode) { return this; }\n    this.sortNodes(); // first to last\n\n    if (this.float) {\n      // restore original Y pos\n      this.nodes.forEach(n => {\n        if (n._updating || n._orig === undefined || n.y === n._orig.y) return;\n        let newY = n.y;\n        while (newY > n._orig.y) {\n          --newY;\n          let collide = this.collide(n, {x: n.x, y: newY, w: n.w, h: n.h});\n          if (!collide) {\n            n._dirty = true;\n            n.y = newY;\n          }\n        }\n      });\n    } else {\n      // top gravity pack\n      this.nodes.forEach((n, i) => {\n        if (n.locked) return;\n        while (n.y > 0) {\n          let newY = i === 0 ? 0 : n.y - 1;\n          let canBeMoved = i === 0 || !this.collide(n, {x: n.x, y: newY, w: n.w, h: n.h});\n          if (!canBeMoved) break;\n          // Note: must be dirty (from last position) for GridStack::OnChange CB to update positions\n          // and move items back. The user 'change' CB should detect changes from the original\n          // starting position instead.\n          n._dirty = (n.y !== newY);\n          n.y = newY;\n        }\n      });\n    }\n    return this;\n  }\n\n  /**\n   * given a random node, makes sure it's coordinates/values are valid in the current grid\n   * @param node to adjust\n   * @param resizing if out of bound, resize down or move into the grid to fit ?\n   */\n  public prepareNode(node: GridStackNode, resizing?: boolean): GridStackNode {\n    node = node || {};\n    node._id = node._id || GridStackEngine._idSeq++;\n\n    // if we're missing position, have the grid position us automatically (before we set them to 0,0)\n    if (node.x === undefined || node.y === undefined || node.x === null || node.y === null) {\n      node.autoPosition = true;\n    }\n\n    // assign defaults for missing required fields\n    let defaults: GridStackNode = { x: 0, y: 0, w: 1, h: 1};\n    Utils.defaults(node, defaults);\n\n    if (!node.autoPosition) { delete node.autoPosition; }\n    if (!node.noResize) { delete node.noResize; }\n    if (!node.noMove) { delete node.noMove; }\n\n    // check for NaN (in case messed up strings were passed. can't do parseInt() || defaults.x above as 0 is valid #)\n    if (typeof node.x == 'string')      { node.x = Number(node.x); }\n    if (typeof node.y == 'string')      { node.y = Number(node.y); }\n    if (typeof node.w == 'string')  { node.w = Number(node.w); }\n    if (typeof node.h == 'string') { node.h = Number(node.h); }\n    if (isNaN(node.x))      { node.x = defaults.x; node.autoPosition = true; }\n    if (isNaN(node.y))      { node.y = defaults.y; node.autoPosition = true; }\n    if (isNaN(node.w))  { node.w = defaults.w; }\n    if (isNaN(node.h)) { node.h = defaults.h; }\n\n    return this.nodeBoundFix(node, resizing);\n  }\n\n  /** part2 of preparing a node to fit inside our grid - checks  for x,y from grid dimensions */\n  public nodeBoundFix(node: GridStackNode, resizing?: boolean): GridStackNode {\n\n    let before = node._orig || Utils.copyPos({}, node);\n\n    if (node.maxW) { node.w = Math.min(node.w, node.maxW); }\n    if (node.maxH) { node.h = Math.min(node.h, node.maxH); }\n    if (node.minW && node.minW <= this.column) { node.w = Math.max(node.w, node.minW); }\n    if (node.minH) { node.h = Math.max(node.h, node.minH); }\n\n    if (node.w > this.column) {\n      // if user loaded a larger than allowed widget for current # of columns,\n      // remember it's full width so we can restore back (1 -> 12 column) #1655\n      // IFF we're not in the middle of column resizing!\n      if (this.column < 12 && !this._inColumnResize) {\n        node.w = Math.min(12, node.w);\n        this.cacheOneLayout(node, 12);\n      }\n      node.w = this.column;\n    } else if (node.w < 1) {\n      node.w = 1;\n    }\n\n    if (this.maxRow && node.h > this.maxRow) {\n      node.h = this.maxRow;\n    } else if (node.h < 1) {\n      node.h = 1;\n    }\n\n    if (node.x < 0) {\n      node.x = 0;\n    }\n    if (node.y < 0) {\n      node.y = 0;\n    }\n\n    if (node.x + node.w > this.column) {\n      if (resizing) {\n        node.w = this.column - node.x;\n      } else {\n        node.x = this.column - node.w;\n      }\n    }\n    if (this.maxRow && node.y + node.h > this.maxRow) {\n      if (resizing) {\n        node.h = this.maxRow - node.y;\n      } else {\n        node.y = this.maxRow - node.h;\n      }\n    }\n\n    if (!Utils.samePos(node, before)) {\n      node._dirty = true;\n    }\n\n    return node;\n  }\n\n  /** returns a list of modified nodes from their original values */\n  public getDirtyNodes(verify?: boolean): GridStackNode[] {\n    // compare original x,y,w,h instead as _dirty can be a temporary state\n    if (verify) {\n      return this.nodes.filter(n => n._dirty && !Utils.samePos(n, n._orig));\n    }\n    return this.nodes.filter(n => n._dirty);\n  }\n\n  /** @internal call this to call onChange callback with dirty nodes so DOM can be updated */\n  protected _notify(removedNodes?: GridStackNode[]): GridStackEngine {\n    if (this.batchMode || !this.onChange) return this;\n    let dirtyNodes = (removedNodes || []).concat(this.getDirtyNodes());\n    this.onChange(dirtyNodes);\n    return this;\n  }\n\n  /** @internal remove dirty and last tried info */\n  public cleanNodes(): GridStackEngine {\n    if (this.batchMode) return this;\n    this.nodes.forEach(n => {\n      delete n._dirty;\n      delete n._lastTried;\n    });\n    return this;\n  }\n\n  /** @internal called to save initial position/size to track real dirty state.\n   * Note: should be called right after we call change event (so next API is can detect changes)\n   * as well as right before we start move/resize/enter (so we can restore items to prev values) */\n  public saveInitial(): GridStackEngine {\n    this.nodes.forEach(n => {\n      n._orig = Utils.copyPos({}, n);\n      delete n._dirty;\n    });\n    this._hasLocked = this.nodes.some(n => n.locked);\n    return this;\n  }\n\n  /** @internal restore all the nodes back to initial values (called when we leave) */\n  public restoreInitial(): GridStackEngine {\n    this.nodes.forEach(n => {\n      if (Utils.samePos(n, n._orig)) return;\n      Utils.copyPos(n, n._orig);\n      n._dirty = true;\n    });\n    this._notify();\n    return this;\n  }\n\n  /** call to add the given node to our list, fixing collision and re-packing */\n  public addNode(node: GridStackNode, triggerAddEvent = false): GridStackNode {\n    let dup = this.nodes.find(n => n._id === node._id);\n    if (dup) return dup; // prevent inserting twice! return it instead.\n\n    // skip prepareNode if we're in middle of column resize (not new) but do check for bounds!\n    node = this._inColumnResize ? this.nodeBoundFix(node) : this.prepareNode(node);\n    delete node._temporaryRemoved;\n    delete node._removeDOM;\n\n    if (node.autoPosition) {\n      this.sortNodes();\n\n      for (let i = 0;; ++i) {\n        let x = i % this.column;\n        let y = Math.floor(i / this.column);\n        if (x + node.w > this.column) {\n          continue;\n        }\n        let box = {x, y, w: node.w, h: node.h};\n        if (!this.nodes.find(n => Utils.isIntercepted(box, n))) {\n          node.x = x;\n          node.y = y;\n          delete node.autoPosition; // found our slot\n          break;\n        }\n      }\n    }\n\n    this.nodes.push(node);\n    if (triggerAddEvent) { this.addedNodes.push(node); }\n\n    this._fixCollisions(node);\n    if (!this.batchMode) { this._packNodes()._notify(); }\n    return node;\n  }\n\n  public removeNode(node: GridStackNode, removeDOM = true, triggerEvent = false): GridStackEngine {\n    if (!this.nodes.find(n => n === node)) {\n      // TEST console.log(`Error: GridStackEngine.removeNode() node._id=${node._id} not found!`)\n      return this;\n    }\n    if (triggerEvent) { // we wait until final drop to manually track removed items (rather than during drag)\n      this.removedNodes.push(node);\n    }\n    if (removeDOM) node._removeDOM = true; // let CB remove actual HTML (used to set _id to null, but then we loose layout info)\n    // don't use 'faster' .splice(findIndex(),1) in case node isn't in our list, or in multiple times.\n    this.nodes = this.nodes.filter(n => n !== node);\n    return this._packNodes()\n      ._notify([node]);\n  }\n\n  public removeAll(removeDOM = true): GridStackEngine {\n    delete this._layouts;\n    if (this.nodes.length === 0) return this;\n    removeDOM && this.nodes.forEach(n => n._removeDOM = true); // let CB remove actual HTML (used to set _id to null, but then we loose layout info)\n    this.removedNodes = this.nodes;\n    this.nodes = [];\n    return this._notify(this.removedNodes);\n  }\n\n  /** checks if item can be moved (layout constrain) vs moveNode(), returning true if was able to move.\n   * In more complicated cases (maxRow) it will attempt at moving the item and fixing\n   * others in a clone first, then apply those changes if still within specs. */\n  public moveNodeCheck(node: GridStackNode, o: GridStackMoveOpts): boolean {\n    // if (node.locked) return false;\n    if (!this.changedPosConstrain(node, o)) return false;\n    o.pack = true;\n\n    // simpler case: move item directly...\n    if (!this.maxRow) {\n      return this.moveNode(node, o);\n    }\n\n    // complex case: create a clone with NO maxRow (will check for out of bounds at the end)\n    let clonedNode: GridStackNode;\n    let clone = new GridStackEngine({\n      column: this.column,\n      float: this.float,\n      nodes: this.nodes.map(n => {\n        if (n === node) {\n          clonedNode = {...n};\n          return clonedNode;\n        }\n        return {...n};\n      })\n    });\n    if (!clonedNode) return false;\n\n    // make sure we are still valid size\n    let canMove = clone.moveNode(clonedNode, o) && clone.getRow() <= this.maxRow;\n    // turns out we can't grow, then see if we can swap instead (ex: full grid) if we're not resizing\n    if (!canMove && !o.resizing) {\n      let collide = this.collide(node, o);\n      if (collide && this.swap(node, collide)) {\n        this._notify();\n        return true;\n      }\n    }\n    if (!canMove) return false;\n\n    // if clone was able to move, copy those mods over to us now instead of caller trying to do this all over!\n    // Note: we can't use the list directly as elements and other parts point to actual node, so copy content\n    clone.nodes.filter(n => n._dirty).forEach(c => {\n      let n = this.nodes.find(a => a._id === c._id);\n      if (!n) return;\n      Utils.copyPos(n, c);\n      n._dirty = true;\n    });\n    this._notify();\n    return true;\n  }\n\n  /** return true if can fit in grid height constrain only (always true if no maxRow) */\n  public willItFit(node: GridStackNode): boolean {\n    delete node._willFitPos;\n    if (!this.maxRow) return true;\n    // create a clone with NO maxRow and check if still within size\n    let clone = new GridStackEngine({\n      column: this.column,\n      float: this.float,\n      nodes: this.nodes.map(n => {return {...n}})\n    });\n    let n = {...node}; // clone node so we don't mod any settings on it but have full autoPosition and min/max as well! #1687\n    this.cleanupNode(n);\n    delete n.el; delete n._id; delete n.content; delete n.grid;\n    clone.addNode(n);\n    if (clone.getRow() <= this.maxRow) {\n      node._willFitPos = Utils.copyPos({}, n);\n      return true;\n    }\n    return false;\n  }\n\n  /** true if x,y or w,h are different after clamping to min/max */\n  public changedPosConstrain(node: GridStackNode, p: GridStackPosition): boolean {\n    // first make sure w,h are set for caller\n    p.w = p.w || node.w;\n    p.h = p.h || node.h;\n    if (node.x !== p.x || node.y !== p.y) return true;\n    // check constrained w,h\n    if (node.maxW) { p.w = Math.min(p.w, node.maxW); }\n    if (node.maxH) { p.h = Math.min(p.h, node.maxH); }\n    if (node.minW) { p.w = Math.max(p.w, node.minW); }\n    if (node.minH) { p.h = Math.max(p.h, node.minH); }\n    return (node.w !== p.w || node.h !== p.h);\n  }\n\n  /** return true if the passed in node was actually moved (checks for no-op and locked) */\n  public moveNode(node: GridStackNode, o: GridStackMoveOpts): boolean {\n    if (!node || /*node.locked ||*/ !o) return false;\n    if (o.pack === undefined) o.pack = true;\n\n    // constrain the passed in values and check if we're still changing our node\n    if (typeof o.x !== 'number') { o.x = node.x; }\n    if (typeof o.y !== 'number') { o.y = node.y; }\n    if (typeof o.w !== 'number') { o.w = node.w; }\n    if (typeof o.h !== 'number') { o.h = node.h; }\n    let resizing = (node.w !== o.w || node.h !== o.h);\n    let nn: GridStackNode = Utils.copyPos({}, node, true); // get min/max out first, then opt positions next\n    Utils.copyPos(nn, o);\n    nn = this.nodeBoundFix(nn, resizing);\n    Utils.copyPos(o, nn);\n\n    if (Utils.samePos(node, o)) return false;\n    let prevPos: GridStackPosition = Utils.copyPos({}, node);\n\n    // check if we will need to fix collision at our new location\n    let collides = this.collideAll(node, nn, o.skip);\n    let needToMove = true;\n    if (collides.length) {\n      // now check to make sure we actually collided over 50% surface area while dragging\n      let collide = node._moving && !o.nested ? this.collideCoverage(node, o, collides) : collides[0];\n      if (collide) {\n        needToMove = !this._fixCollisions(node, nn, collide, o); // check if already moved...\n      } else {\n        needToMove = false; // we didn't cover >50% for a move, skip...\n      }\n    }\n\n    // now move (to the original ask vs the collision version which might differ) and repack things\n    if (needToMove) {\n      node._dirty = true;\n      Utils.copyPos(node, nn);\n    }\n    if (o.pack) {\n      this._packNodes()\n        ._notify();\n    }\n    return !Utils.samePos(node, prevPos); // pack might have moved things back\n  }\n\n  public getRow(): number {\n    return this.nodes.reduce((row, n) => Math.max(row, n.y + n.h), 0);\n  }\n\n  public beginUpdate(node: GridStackNode): GridStackEngine {\n    if (!node._updating) {\n      node._updating = true;\n      delete node._skipDown;\n      if (!this.batchMode) this.saveInitial();\n    }\n    return this;\n  }\n\n  public endUpdate(): GridStackEngine {\n    let n = this.nodes.find(n => n._updating);\n    if (n) {\n      delete n._updating;\n      delete n._skipDown;\n    }\n    return this;\n  }\n\n  /** saves a copy of the largest column layout (eg 12 even when rendering oneColumnMode, so we don't loose orig layout),\n   * returning a list of widgets for serialization */\n  public save(saveElement = true): GridStackNode[] {\n    // use the highest layout for any saved info so we can have full detail on reload #1849\n    let len = this._layouts?.length;\n    let layout = len && this.column !== (len - 1) ? this._layouts[len - 1] : null;\n    let list: GridStackNode[] = [];\n    this.sortNodes();\n    this.nodes.forEach(n => {\n      let wl = layout?.find(l => l._id === n._id);\n      let w: GridStackNode = {...n};\n      // use layout info instead if set\n      if (wl) { w.x = wl.x; w.y = wl.y; w.w = wl.w; }\n      // delete internals\n      for (let key in w) { if (key[0] === '_' || w[key] === null || w[key] === undefined ) delete w[key]; }\n      delete w.grid;\n      if (!saveElement) delete w.el;\n      // delete default values (will be re-created on read)\n      if (!w.autoPosition) delete w.autoPosition;\n      if (!w.noResize) delete w.noResize;\n      if (!w.noMove) delete w.noMove;\n      if (!w.locked) delete w.locked;\n      list.push(w);\n    });\n    return list;\n  }\n\n  /** @internal called whenever a node is added or moved - updates the cached layouts */\n  public layoutsNodesChange(nodes: GridStackNode[]): GridStackEngine {\n    if (!this._layouts || this._inColumnResize) return this;\n    // remove smaller layouts - we will re-generate those on the fly... larger ones need to update\n    this._layouts.forEach((layout, column) => {\n      if (!layout || column === this.column) return this;\n      if (column < this.column) {\n        this._layouts[column] = undefined;\n      }\n      else {\n        // we save the original x,y,w (h isn't cached) to see what actually changed to propagate better.\n        // NOTE: we don't need to check against out of bound scaling/moving as that will be done when using those cache values. #1785\n        let ratio = column / this.column;\n        nodes.forEach(node => {\n          if (!node._orig) return; // didn't change (newly added ?)\n          let n = layout.find(l => l._id === node._id);\n          if (!n) return; // no cache for new nodes. Will use those values.\n          // Y changed, push down same amount\n          // TODO: detect doing item 'swaps' will help instead of move (especially in 1 column mode)\n          if (node.y !== node._orig.y) {\n            n.y += (node.y - node._orig.y);\n          }\n          // X changed, scale from new position\n          if (node.x !== node._orig.x) {\n            n.x = Math.round(node.x * ratio);\n          }\n          // width changed, scale from new width\n          if (node.w !== node._orig.w) {\n            n.w = Math.round(node.w * ratio);\n          }\n          // ...height always carries over from cache\n        });\n      }\n    });\n    return this;\n  }\n\n  /**\n   * @internal Called to scale the widget width & position up/down based on the column change.\n   * Note we store previous layouts (especially original ones) to make it possible to go\n   * from say 12 -> 1 -> 12 and get back to where we were.\n   *\n   * @param prevColumn previous number of columns\n   * @param column  new column number\n   * @param nodes different sorted list (ex: DOM order) instead of current list\n   * @param layout specify the type of re-layout that will happen (position, size, etc...).\n   * Note: items will never be outside of the current column boundaries. default (moveScale). Ignored for 1 column\n   */\n  public updateNodeWidths(prevColumn: number, column: number, nodes: GridStackNode[], layout: ColumnOptions = 'moveScale'): GridStackEngine {\n    if (!this.nodes.length || !column || prevColumn === column) return this;\n\n    // cache the current layout in case they want to go back (like 12 -> 1 -> 12) as it requires original data\n    this.cacheLayout(this.nodes, prevColumn);\n    this.batchUpdate(); // do this EARLY as it will call saveInitial() so we can detect where we started for _dirty and collision\n    let newNodes: GridStackNode[] = [];\n\n    // if we're going to 1 column and using DOM order rather than default sorting, then generate that layout\n    let domOrder = false;\n    if (column === 1 && nodes?.length) {\n      domOrder = true;\n      let top = 0;\n      nodes.forEach(n => {\n        n.x = 0;\n        n.w = 1;\n        n.y = Math.max(n.y, top);\n        top = n.y + n.h;\n      });\n      newNodes = nodes;\n      nodes = [];\n    } else {\n      nodes = Utils.sort(this.nodes, -1, prevColumn); // current column reverse sorting so we can insert last to front (limit collision)\n    }\n\n    // see if we have cached previous layout IFF we are going up in size (restore) otherwise always\n    // generate next size down from where we are (looks more natural as you gradually size down).\n    let cacheNodes: GridStackNode[] = [];\n    if (column > prevColumn) {\n      cacheNodes = this._layouts[column] || [];\n      // ...if not, start with the largest layout (if not already there) as down-scaling is more accurate\n      // by pretending we came from that larger column by assigning those values as starting point\n      let lastIndex = this._layouts.length - 1;\n      if (!cacheNodes.length && prevColumn !== lastIndex && this._layouts[lastIndex]?.length) {\n        prevColumn = lastIndex;\n        this._layouts[lastIndex].forEach(cacheNode => {\n          let n = nodes.find(n => n._id === cacheNode._id);\n          if (n) {\n            // still current, use cache info positions\n            n.x = cacheNode.x;\n            n.y = cacheNode.y;\n            n.w = cacheNode.w;\n          }\n        });\n      }\n    }\n\n    // if we found cache re-use those nodes that are still current\n    cacheNodes.forEach(cacheNode => {\n      let j = nodes.findIndex(n => n._id === cacheNode._id);\n      if (j !== -1) {\n        // still current, use cache info positions\n        nodes[j].x = cacheNode.x;\n        nodes[j].y = cacheNode.y;\n        nodes[j].w = cacheNode.w;\n        newNodes.push(nodes[j]);\n        nodes.splice(j, 1);\n      }\n    });\n    // ...and add any extra non-cached ones\n    if (nodes.length) {\n      if (typeof layout === 'function') {\n        layout(column, prevColumn, newNodes, nodes);\n      } else if (!domOrder) {\n        let ratio = column / prevColumn;\n        let move = (layout === 'move' || layout === 'moveScale');\n        let scale = (layout === 'scale' || layout === 'moveScale');\n        nodes.forEach(node => {\n          // NOTE: x + w could be outside of the grid, but addNode() below will handle that\n          node.x = (column === 1 ? 0 : (move ? Math.round(node.x * ratio) : Math.min(node.x, column - 1)));\n          node.w = ((column === 1 || prevColumn === 1) ? 1 :\n            scale ? (Math.round(node.w * ratio) || 1) : (Math.min(node.w, column)));\n          newNodes.push(node);\n        });\n        nodes = [];\n      }\n    }\n\n    // finally re-layout them in reverse order (to get correct placement)\n    newNodes = Utils.sort(newNodes, -1, column);\n    this._inColumnResize = true; // prevent cache update\n    this.nodes = []; // pretend we have no nodes to start with (add() will use same structures) to simplify layout\n    newNodes.forEach(node => {\n      this.addNode(node, false); // 'false' for add event trigger\n      delete node._orig; // make sure the commit doesn't try to restore things back to original\n    });\n    this.batchUpdate(false);\n    delete this._inColumnResize;\n    return this;\n  }\n\n  /**\n   * call to cache the given layout internally to the given location so we can restore back when column changes size\n   * @param nodes list of nodes\n   * @param column corresponding column index to save it under\n   * @param clear if true, will force other caches to be removed (default false)\n   */\n  public cacheLayout(nodes: GridStackNode[], column: number, clear = false): GridStackEngine {\n    let copy: GridStackNode[] = [];\n    nodes.forEach((n, i) => {\n      n._id = n._id || GridStackEngine._idSeq++; // make sure we have an id in case this is new layout, else re-use id already set\n      copy[i] = {x: n.x, y: n.y, w: n.w, _id: n._id} // only thing we change is x,y,w and id to find it back\n    });\n    this._layouts = clear ? [] : this._layouts || []; // use array to find larger quick\n    this._layouts[column] = copy;\n    return this;\n  }\n\n  /**\n   * call to cache the given node layout internally to the given location so we can restore back when column changes size\n   * @param node single node to cache\n   * @param column corresponding column index to save it under\n   */\n  public cacheOneLayout(n: GridStackNode, column: number): GridStackEngine {\n    n._id = n._id || GridStackEngine._idSeq++;\n    let layout: GridStackNode = {x: n.x, y: n.y, w: n.w, _id: n._id}\n    this._layouts = this._layouts || [];\n    this._layouts[column] = this._layouts[column] || [];\n    let index = this._layouts[column].findIndex(l => l._id === n._id);\n    index === -1 ? this._layouts[column].push(layout) : this._layouts[column][index] = layout;\n    return this;\n  }\n\n\n  /** called to remove all internal values but the _id */\n  public cleanupNode(node: GridStackNode): GridStackEngine {\n    for (let prop in node) {\n      if (prop[0] === '_' && prop !== '_id') delete node[prop];\n    }\n    return this;\n  }\n}\n","/*!\r\n * GridStack 6.0.1\r\n * https://gridstackjs.com/\r\n *\r\n * Copyright (c) 2021-2022 Alain Dumesny\r\n * see root license https://github.com/gridstack/gridstack.js/tree/master/LICENSE\r\n */\r\nimport { GridStackEngine } from './gridstack-engine';\r\nimport { Utils, HeightData, obsolete } from './utils';\r\nimport { ColumnOptions, GridItemHTMLElement, GridStackElement, GridStackEventHandlerCallback,\r\n  GridStackNode, GridStackOptions, GridStackWidget, numberOrString, DDUIData, DDDragInOpt, GridStackPosition } from './types';\r\n\r\n// export all dependent file as well to make it easier for users to just import the main file\r\nexport * from './types';\r\nexport * from './utils';\r\nexport * from './gridstack-engine';\r\n\r\nexport interface GridHTMLElement extends HTMLElement {\r\n  gridstack?: GridStack; // grid's parent DOM element points back to grid class\r\n}\r\n/** list of possible events, or space separated list of them */\r\nexport type GridStackEvent = 'added' | 'change' | 'disable' | 'drag' | 'dragstart' | 'dragstop' | 'dropped' |\r\n  'enable' | 'removed' | 'resize' | 'resizestart' | 'resizestop' | string;\r\n\r\n/** Defines the coordinates of an object */\r\nexport interface MousePosition {\r\n  top: number;\r\n  left: number;\r\n}\r\n\r\n/** Defines the position of a cell inside the grid*/\r\nexport interface CellPosition {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\ninterface GridCSSStyleSheet extends CSSStyleSheet {\r\n  _id?: string; // random id we will use to style us\r\n  _max?: number; // internal tracker of the max # of rows we created\\\r\n}\r\n\r\n// default values for grid options - used during init and when saving out\r\nconst GridDefaults: GridStackOptions = {\r\n  column: 12,\r\n  minRow: 0,\r\n  maxRow: 0,\r\n  itemClass: 'grid-stack-item',\r\n  placeholderClass: 'grid-stack-placeholder',\r\n  placeholderText: '',\r\n  handle: '.grid-stack-item-content',\r\n  handleClass: null,\r\n  styleInHead: false,\r\n  cellHeight: 'auto',\r\n  cellHeightThrottle: 100,\r\n  margin: 10,\r\n  auto: true,\r\n  oneColumnSize: 768,\r\n  float: false,\r\n  staticGrid: false,\r\n  animate: true,\r\n  alwaysShowResizeHandle: 'mobile',\r\n  resizable: {\r\n    handles: 'se'\r\n  },\r\n  draggable: {\r\n    handle: '.grid-stack-item-content',\r\n    appendTo: 'body'\r\n  },\r\n  disableDrag: false,\r\n  disableResize: false,\r\n  rtl: 'auto',\r\n  removable: false,\r\n  removableOptions: {\r\n    accept: '.grid-stack-item'\r\n  },\r\n  marginUnit: 'px',\r\n  cellHeightUnit: 'px',\r\n  disableOneColumnMode: false,\r\n  oneColumnModeDomSort: false,\r\n};\r\n\r\n/**\r\n * Main gridstack class - you will need to call `GridStack.init()` first to initialize your grid.\r\n * Note: your grid elements MUST have the following classes for the CSS layout to work:\r\n * @example\r\n * <div class=\"grid-stack\">\r\n *   <div class=\"grid-stack-item\">\r\n *     <div class=\"grid-stack-item-content\">Item 1</div>\r\n *   </div>\r\n * </div>\r\n */\r\nexport class GridStack {\r\n\r\n  /**\r\n   * initializing the HTML element, or selector string, into a grid will return the grid. Calling it again will\r\n   * simply return the existing instance (ignore any passed options). There is also an initAll() version that support\r\n   * multiple grids initialization at once. Or you can use addGrid() to create the entire grid from JSON.\r\n   * @param options grid options (optional)\r\n   * @param elOrString element or CSS selector (first one used) to convert to a grid (default to '.grid-stack' class selector)\r\n   *\r\n   * @example\r\n   * let grid = GridStack.init();\r\n   *\r\n   * Note: the HTMLElement (of type GridHTMLElement) will store a `gridstack: GridStack` value that can be retrieve later\r\n   * let grid = document.querySelector('.grid-stack').gridstack;\r\n   */\r\n  public static init(options: GridStackOptions = {}, elOrString: GridStackElement = '.grid-stack'): GridStack {\r\n    let el = GridStack.getGridElement(elOrString);\r\n    if (!el) {\r\n      if (typeof elOrString === 'string') {\r\n        console.error('GridStack.initAll() no grid was found with selector \"' + elOrString + '\" - element missing or wrong selector ?' +\r\n        '\\nNote: \".grid-stack\" is required for proper CSS styling and drag/drop, and is the default selector.');\r\n      } else {\r\n        console.error('GridStack.init() no grid element was passed.');\r\n      }\r\n      return null;\r\n    }\r\n    if (!el.gridstack) {\r\n      el.gridstack = new GridStack(el, Utils.cloneDeep(options));\r\n    }\r\n    return el.gridstack\r\n  }\r\n\r\n  /**\r\n   * Will initialize a list of elements (given a selector) and return an array of grids.\r\n   * @param options grid options (optional)\r\n   * @param selector elements selector to convert to grids (default to '.grid-stack' class selector)\r\n   *\r\n   * @example\r\n   * let grids = GridStack.initAll();\r\n   * grids.forEach(...)\r\n   */\r\n  public static initAll(options: GridStackOptions = {}, selector = '.grid-stack'): GridStack[] {\r\n    let grids: GridStack[] = [];\r\n    GridStack.getGridElements(selector).forEach(el => {\r\n      if (!el.gridstack) {\r\n        el.gridstack = new GridStack(el, Utils.cloneDeep(options));\r\n        delete options.dragIn; delete options.dragInOptions; // only need to be done once (really a static global thing, not per grid)\r\n      }\r\n      grids.push(el.gridstack);\r\n    });\r\n    if (grids.length === 0) {\r\n      console.error('GridStack.initAll() no grid was found with selector \"' + selector + '\" - element missing or wrong selector ?' +\r\n      '\\nNote: \".grid-stack\" is required for proper CSS styling and drag/drop, and is the default selector.');\r\n    }\r\n    return grids;\r\n  }\r\n\r\n  /**\r\n   * call to create a grid with the given options, including loading any children from JSON structure. This will call GridStack.init(), then\r\n   * grid.load() on any passed children (recursively). Great alternative to calling init() if you want entire grid to come from\r\n   * JSON serialized data, including options.\r\n   * @param parent HTML element parent to the grid\r\n   * @param opt grids options used to initialize the grid, and list of children\r\n   */\r\n  public static addGrid(parent: HTMLElement, opt: GridStackOptions = {}): GridStack {\r\n    if (!parent) return null;\r\n\r\n    // create the grid element, but check if the passed 'parent' already has grid styling and should be used instead\r\n    let el = parent;\r\n    if (!parent.classList.contains('grid-stack')) {\r\n      let doc = document.implementation.createHTMLDocument(''); // IE needs a param\r\n      doc.body.innerHTML = `<div class=\"grid-stack ${opt.class || ''}\"></div>`;\r\n      el = doc.body.children[0] as HTMLElement;\r\n      parent.appendChild(el);\r\n    }\r\n\r\n    // create grid class and load any children\r\n    let grid = GridStack.init(opt, el);\r\n    if (grid.opts.children) {\r\n      let children = grid.opts.children;\r\n      delete grid.opts.children;\r\n      grid.load(children);\r\n    }\r\n    return grid;\r\n  }\r\n\r\n  /** call this method to register your engine instead of the default one.\r\n   * See instead `GridStackOptions.engineClass` if you only need to\r\n   * replace just one instance.\r\n   */\r\n  static registerEngine(engineClass: typeof GridStackEngine) {\r\n    GridStack.engineClass = engineClass;\r\n  }\r\n\r\n  /** scoping so users can call GridStack.Utils.sort() for example */\r\n  public static Utils = Utils;\r\n\r\n  /** scoping so users can call new GridStack.Engine(12) for example */\r\n  public static Engine = GridStackEngine;\r\n\r\n  /** the HTML element tied to this grid after it's been initialized */\r\n  public el: GridHTMLElement;\r\n\r\n  /** engine used to implement non DOM grid functionality */\r\n  public engine: GridStackEngine;\r\n\r\n  /** grid options - public for classes to access, but use methods to modify! */\r\n  public opts: GridStackOptions;\r\n\r\n  protected static engineClass: typeof GridStackEngine;\r\n\r\n  /** @internal create placeholder DIV as needed */\r\n  public get placeholder(): HTMLElement {\r\n    if (!this._placeholder) {\r\n      let placeholderChild = document.createElement('div'); // child so padding match item-content\r\n      placeholderChild.className = 'placeholder-content';\r\n      if (this.opts.placeholderText) {\r\n        placeholderChild.innerHTML = this.opts.placeholderText;\r\n      }\r\n      this._placeholder = document.createElement('div');\r\n      this._placeholder.classList.add(this.opts.placeholderClass, GridDefaults.itemClass, this.opts.itemClass);\r\n      this.placeholder.appendChild(placeholderChild);\r\n    }\r\n    return this._placeholder;\r\n  }\r\n  /** @internal */\r\n  protected _placeholder: HTMLElement;\r\n  /** @internal */\r\n  protected _prevColumn: number;\r\n  /** @internal */\r\n  protected _ignoreLayoutsNodeChange: boolean;\r\n  /** @internal */\r\n  public _gsEventHandler = {};\r\n  /** @internal */\r\n  protected _styles: GridCSSStyleSheet;\r\n  /** @internal flag to keep cells square during resize */\r\n  protected _isAutoCellHeight: boolean;\r\n  /** @internal track event binding to window resize so we can remove */\r\n  protected _windowResizeBind: () => void;\r\n  /** @internal limit auto cell resizing method */\r\n  protected _cellHeightThrottle: () => void;\r\n  /** @internal true when loading items to insert first rather than append */\r\n  protected _insertNotAppend: boolean;\r\n  /** @internal extra row added when dragging at the bottom of the grid */\r\n  protected _extraDragRow = 0;\r\n  /** @internal true if nested grid should get column count from our width */\r\n  protected _autoColumn?: boolean;\r\n\r\n  /**\r\n   * Construct a grid item from the given element and options\r\n   * @param el\r\n   * @param opts\r\n   */\r\n  public constructor(el: GridHTMLElement, opts: GridStackOptions = {}) {\r\n    this.el = el; // exposed HTML element to the user\r\n    opts = opts || {}; // handles null/undefined/0\r\n\r\n    // if row property exists, replace minRow and maxRow instead\r\n    if (opts.row) {\r\n      opts.minRow = opts.maxRow = opts.row;\r\n      delete opts.row;\r\n    }\r\n    let rowAttr = Utils.toNumber(el.getAttribute('gs-row'));\r\n\r\n    // flag only valid in sub-grids (handled by parent, not here)\r\n    if (opts.column === 'auto') {\r\n      delete opts.column;\r\n    }\r\n    // 'minWidth' legacy support in 5.1\r\n    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\r\n    let anyOpts = opts as any;\r\n    if (anyOpts.minWidth !== undefined) {\r\n      opts.oneColumnSize = opts.oneColumnSize || anyOpts.minWidth;\r\n      delete anyOpts.minWidth;\r\n    }\r\n    // save original setting so we can restore on save\r\n    if (opts.alwaysShowResizeHandle !== undefined) {\r\n      (opts as any)._alwaysShowResizeHandle = opts.alwaysShowResizeHandle;\r\n    }\r\n\r\n    // elements DOM attributes override any passed options (like CSS style) - merge the two together\r\n    let defaults: GridStackOptions = {...Utils.cloneDeep(GridDefaults),\r\n      column: Utils.toNumber(el.getAttribute('gs-column')) || GridDefaults.column,\r\n      minRow: rowAttr ? rowAttr : Utils.toNumber(el.getAttribute('gs-min-row')) || GridDefaults.minRow,\r\n      maxRow: rowAttr ? rowAttr : Utils.toNumber(el.getAttribute('gs-max-row')) || GridDefaults.maxRow,\r\n      staticGrid: Utils.toBool(el.getAttribute('gs-static')) || GridDefaults.staticGrid,\r\n      _styleSheetClass: 'grid-stack-instance-' + (Math.random() * 10000).toFixed(0),\r\n      draggable: {\r\n        handle: (opts.handleClass ? '.' + opts.handleClass : (opts.handle ? opts.handle : '')) || GridDefaults.draggable.handle,\r\n      },\r\n      removableOptions: {\r\n        accept: opts.itemClass ? '.' + opts.itemClass : GridDefaults.removableOptions.accept,\r\n      },\r\n    };\r\n    if (el.getAttribute('gs-animate')) { // default to true, but if set to false use that instead\r\n      defaults.animate = Utils.toBool(el.getAttribute('gs-animate'))\r\n    }\r\n\r\n    this.opts = Utils.defaults(opts, defaults);\r\n    opts = null; // make sure we use this.opts instead\r\n    this._initMargin(); // part of settings defaults...\r\n\r\n    // Now check if we're loading into 1 column mode FIRST so we don't do un-necessary work (like cellHeight = width / 12 then go 1 column)\r\n    if (this.opts.column !== 1 && !this.opts.disableOneColumnMode && this._widthOrContainer() <= this.opts.oneColumnSize) {\r\n      this._prevColumn = this.getColumn();\r\n      this.opts.column = 1;\r\n    }\r\n\r\n    if (this.opts.rtl === 'auto') {\r\n      this.opts.rtl = (el.style.direction === 'rtl');\r\n    }\r\n    if (this.opts.rtl) {\r\n      this.el.classList.add('grid-stack-rtl');\r\n    }\r\n\r\n    // check if we're been nested, and if so update our style and keep pointer around (used during save)\r\n    let parentGridItemEl = Utils.closestByClass(this.el, GridDefaults.itemClass) as GridItemHTMLElement;\r\n    if (parentGridItemEl && parentGridItemEl.gridstackNode) {\r\n      this.opts._isNested = parentGridItemEl.gridstackNode;\r\n      this.opts._isNested.subGrid = this;\r\n      parentGridItemEl.classList.add('grid-stack-nested');\r\n      this.el.classList.add('grid-stack-nested');\r\n    }\r\n\r\n    this._isAutoCellHeight = (this.opts.cellHeight === 'auto');\r\n    if (this._isAutoCellHeight || this.opts.cellHeight === 'initial') {\r\n      // make the cell content square initially (will use resize/column event to keep it square)\r\n      this.cellHeight(undefined, false);\r\n    } else {\r\n      // append unit if any are set\r\n      if (typeof this.opts.cellHeight == 'number' && this.opts.cellHeightUnit && this.opts.cellHeightUnit !== GridDefaults.cellHeightUnit) {\r\n        this.opts.cellHeight = this.opts.cellHeight + this.opts.cellHeightUnit;\r\n        delete this.opts.cellHeightUnit;\r\n      }\r\n      this.cellHeight(this.opts.cellHeight, false);\r\n    }\r\n\r\n    // see if we need to adjust auto-hide\r\n    if (this.opts.alwaysShowResizeHandle === 'mobile') {\r\n      this.opts.alwaysShowResizeHandle = isTouch;\r\n    }\r\n\r\n    this.el.classList.add(this.opts._styleSheetClass);\r\n\r\n    this._setStaticClass();\r\n\r\n    let engineClass = this.opts.engineClass || GridStack.engineClass || GridStackEngine;\r\n    this.engine = new engineClass({\r\n      column: this.getColumn(),\r\n      float: this.opts.float,\r\n      maxRow: this.opts.maxRow,\r\n      onChange: (cbNodes) => {\r\n        let maxH = 0;\r\n        this.engine.nodes.forEach(n => { maxH = Math.max(maxH, n.y + n.h) });\r\n        cbNodes.forEach(n => {\r\n          let el = n.el;\r\n          if (!el) return;\r\n          if (n._removeDOM) {\r\n            if (el) el.remove();\r\n            delete n._removeDOM;\r\n          } else {\r\n            this._writePosAttr(el, n);\r\n          }\r\n        });\r\n        this._updateStyles(false, maxH); // false = don't recreate, just append if need be\r\n      }\r\n    });\r\n\r\n    if (this.opts.auto) {\r\n      this.batchUpdate(); // prevent in between re-layout #1535 TODO: this only set float=true, need to prevent collision check...\r\n      let elements: {el: HTMLElement; i: number}[] = [];\r\n      this.getGridItems().forEach(el => { // get dom elements (not nodes yet)\r\n        let x = parseInt(el.getAttribute('gs-x'));\r\n        let y = parseInt(el.getAttribute('gs-y'));\r\n        elements.push({\r\n          el,\r\n          // if x,y are missing (autoPosition) add them to end of list - but keep their respective DOM order\r\n          i: (Number.isNaN(x) ? 1000 : x) + (Number.isNaN(y) ? 1000 : y) * this.getColumn()\r\n        });\r\n      });\r\n      elements.sort((a, b) => a.i - b.i).forEach(e => this._prepareElement(e.el));\r\n      this.batchUpdate(false);\r\n    }\r\n\r\n    this.setAnimation(this.opts.animate);\r\n\r\n    this._updateStyles();\r\n    if (this.opts.column != 12) {\r\n      this.el.classList.add('grid-stack-' + this.opts.column);\r\n    }\r\n\r\n    // legacy support to appear 'per grid` options when really global.\r\n    if (this.opts.dragIn) GridStack.setupDragIn(this.opts.dragIn, this.opts.dragInOptions);\r\n    delete this.opts.dragIn;\r\n    delete this.opts.dragInOptions;\r\n\r\n    this._setupRemoveDrop();\r\n    this._setupAcceptWidget();\r\n    this._updateWindowResizeEvent();\r\n  }\r\n\r\n  /**\r\n   * add a new widget and returns it.\r\n   *\r\n   * Widget will be always placed even if result height is more than actual grid height.\r\n   * You need to use `willItFit()` before calling addWidget for additional check.\r\n   * See also `makeWidget()`.\r\n   *\r\n   * @example\r\n   * let grid = GridStack.init();\r\n   * grid.addWidget({w: 3, content: 'hello'});\r\n   * grid.addWidget('<div class=\"grid-stack-item\"><div class=\"grid-stack-item-content\">hello</div></div>', {w: 3});\r\n   *\r\n   * @param el  GridStackWidget (which can have content string as well), html element, or string definition to add\r\n   * @param options widget position/size options (optional, and ignore if first param is already option) - see GridStackWidget\r\n   */\r\n  public addWidget(els?: GridStackWidget | GridStackElement, options?: GridStackWidget): GridItemHTMLElement {\r\n\r\n    // support legacy call for now ?\r\n    if (arguments.length > 2) {\r\n      console.warn('gridstack.ts: `addWidget(el, x, y, width...)` is deprecated. Use `addWidget({x, y, w, content, ...})`. It will be removed soon');\r\n      // eslint-disable-next-line prefer-rest-params\r\n      let a = arguments, i = 1,\r\n        opt: GridStackWidget = { x:a[i++], y:a[i++], w:a[i++], h:a[i++], autoPosition:a[i++],\r\n          minW:a[i++], maxW:a[i++], minH:a[i++], maxH:a[i++], id:a[i++] };\r\n      return this.addWidget(els, opt);\r\n    }\r\n\r\n    function isGridStackWidget(w: GridStackWidget): w is GridStackWidget { // https://medium.com/ovrsea/checking-the-type-of-an-object-in-typescript-the-type-guards-24d98d9119b0\r\n      return w.x !== undefined || w.y !== undefined || w.w !== undefined || w.h !== undefined || w.content !== undefined ? true : false;\r\n    }\r\n\r\n    let el: HTMLElement;\r\n    if (typeof els === 'string') {\r\n      let doc = document.implementation.createHTMLDocument(''); // IE needs a param\r\n      doc.body.innerHTML = els;\r\n      el = doc.body.children[0] as HTMLElement;\r\n    } else if (arguments.length === 0 || arguments.length === 1 && isGridStackWidget(els)) {\r\n      let content = els ? (els as GridStackWidget).content || '' : '';\r\n      options = els;\r\n      let doc = document.implementation.createHTMLDocument(''); // IE needs a param\r\n      doc.body.innerHTML = `<div class=\"grid-stack-item ${this.opts.itemClass || ''}\"><div class=\"grid-stack-item-content\">${content}</div></div>`;\r\n      el = doc.body.children[0] as HTMLElement;\r\n    } else {\r\n      el = els as HTMLElement;\r\n    }\r\n\r\n    // Tempting to initialize the passed in opt with default and valid values, but this break knockout demos\r\n    // as the actual value are filled in when _prepareElement() calls el.getAttribute('gs-xyz) before adding the node.\r\n    // So make sure we load any DOM attributes that are not specified in passed in options (which override)\r\n    let domAttr = this._readAttr(el);\r\n    options = Utils.cloneDeep(options) || {};  // make a copy before we modify in case caller re-uses it\r\n    Utils.defaults(options, domAttr);\r\n    let node = this.engine.prepareNode(options);\r\n    this._writeAttr(el, options);\r\n\r\n    if (this._insertNotAppend) {\r\n      this.el.prepend(el);\r\n    } else {\r\n      this.el.appendChild(el);\r\n    }\r\n\r\n    // similar to makeWidget() that doesn't read attr again and worse re-create a new node and loose any _id\r\n    this._prepareElement(el, true, options);\r\n    this._updateContainerHeight();\r\n\r\n    // check if nested grid definition is present\r\n    if (node.subGrid && !(node.subGrid as GridStack).el) { // see if there is a sub-grid to create too\r\n      // if column special case it set, remember that flag and set default\r\n      let autoColumn: boolean;\r\n      let ops = node.subGrid as GridStackOptions;\r\n      if (ops.column === 'auto') {\r\n        ops.column = node.w;\r\n        ops.disableOneColumnMode = true; // driven by parent\r\n        autoColumn = true;\r\n      }\r\n      let content = node.el.querySelector('.grid-stack-item-content') as HTMLElement;\r\n      node.subGrid = GridStack.addGrid(content, node.subGrid as GridStackOptions);\r\n      if (autoColumn) { node.subGrid._autoColumn = true; }\r\n    }\r\n\r\n    this._triggerAddEvent();\r\n    this._triggerChangeEvent();\r\n\r\n    return el;\r\n  }\r\n\r\n  /**\r\n  /**\r\n   * saves the current layout returning a list of widgets for serialization which might include any nested grids.\r\n   * @param saveContent if true (default) the latest html inside .grid-stack-content will be saved to GridStackWidget.content field, else it will\r\n   * be removed.\r\n   * @param saveGridOpt if true (default false), save the grid options itself, so you can call the new GridStack.addGrid()\r\n   * to recreate everything from scratch. GridStackOptions.children would then contain the widget list instead.\r\n   * @returns list of widgets or full grid option, including .children list of widgets\r\n   */\r\n  public save(saveContent = true, saveGridOpt = false): GridStackWidget[] | GridStackOptions {\r\n    // return copied nodes we can modify at will...\r\n    let list = this.engine.save(saveContent);\r\n\r\n    // check for HTML content and nested grids\r\n    list.forEach(n => {\r\n      if (saveContent && n.el && !n.subGrid) { // sub-grid are saved differently, not plain content\r\n        let sub = n.el.querySelector('.grid-stack-item-content');\r\n        n.content = sub ? sub.innerHTML : undefined;\r\n        if (!n.content) delete n.content;\r\n      } else {\r\n        if (!saveContent) { delete n.content; }\r\n        // check for nested grid\r\n        if (n.subGrid) {\r\n          n.subGrid = (n.subGrid as GridStack).save(saveContent, true) as GridStackOptions;\r\n        }\r\n      }\r\n      delete n.el;\r\n    });\r\n\r\n    // check if save entire grid options (needed for recursive) + children...\r\n    if (saveGridOpt) {\r\n      let o: GridStackOptions = Utils.cloneDeep(this.opts);\r\n      // delete default values that will be recreated on launch\r\n      if (o.marginBottom === o.marginTop && o.marginRight === o.marginLeft && o.marginTop === o.marginRight) {\r\n        o.margin = o.marginTop;\r\n        delete o.marginTop; delete o.marginRight; delete o.marginBottom; delete o.marginLeft;\r\n      }\r\n      if (o.rtl === (this.el.style.direction === 'rtl')) { o.rtl = 'auto' }\r\n      if (this._isAutoCellHeight) {\r\n        o.cellHeight = 'auto'\r\n      }\r\n      if (this._autoColumn) {\r\n        o.column = 'auto';\r\n        delete o.disableOneColumnMode;\r\n      }\r\n      const origShow = (o as any)._alwaysShowResizeHandle;\r\n      delete (o as any)._alwaysShowResizeHandle;\r\n      if (origShow !== undefined) {\r\n        o.alwaysShowResizeHandle = origShow;\r\n      } else {\r\n        delete o.alwaysShowResizeHandle;\r\n      }\r\n      Utils.removeInternalAndSame(o, GridDefaults);\r\n      o.children = list;\r\n      return o;\r\n    }\r\n\r\n    return list;\r\n  }\r\n\r\n  /**\r\n   * load the widgets from a list. This will call update() on each (matching by id) or add/remove widgets that are not there.\r\n   *\r\n   * @param layout list of widgets definition to update/create\r\n   * @param addAndRemove boolean (default true) or callback method can be passed to control if and how missing widgets can be added/removed, giving\r\n   * the user control of insertion.\r\n   *\r\n   * @example\r\n   * see http://gridstackjs.com/demo/serialization.html\r\n   **/\r\n  public load(layout: GridStackWidget[], addAndRemove: boolean | ((g: GridStack, w: GridStackWidget, add: boolean) => GridItemHTMLElement)  = true): GridStack {\r\n    let items = GridStack.Utils.sort([...layout], -1, this._prevColumn || this.getColumn()); // make copy before we mod/sort\r\n    this._insertNotAppend = true; // since create in reverse order...\r\n\r\n    // if we're loading a layout into 1 column (_prevColumn is set only when going to 1) and items don't fit, make sure to save\r\n    // the original wanted layout so we can scale back up correctly #1471\r\n    if (this._prevColumn && this._prevColumn !== this.opts.column && items.some(n => (n.x + n.w) > this.opts.column)) {\r\n      this._ignoreLayoutsNodeChange = true; // skip layout update\r\n      this.engine.cacheLayout(items, this._prevColumn, true);\r\n    }\r\n\r\n    let removed: GridStackNode[] = [];\r\n    this.batchUpdate();\r\n\r\n    // see if any items are missing from new layout and need to be removed first\r\n    if (addAndRemove) {\r\n      let copyNodes = [...this.engine.nodes]; // don't loop through array you modify\r\n      copyNodes.forEach(n => {\r\n        let item = items.find(w => n.id === w.id);\r\n        if (!item) {\r\n          if (typeof(addAndRemove) === 'function') {\r\n            addAndRemove(this, n, false);\r\n          } else {\r\n            removed.push(n); // batch keep track\r\n            this.removeWidget(n.el, true, false);\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    // now add/update the widgets\r\n    items.forEach(w => {\r\n      let item = (w.id || w.id === 0) ? this.engine.nodes.find(n => n.id === w.id) : undefined;\r\n      if (item) {\r\n        this.update(item.el, w);\r\n        if (w.subGrid && (w.subGrid as GridStackOptions).children) { // update any sub grid as well\r\n          let sub = item.el.querySelector('.grid-stack') as GridHTMLElement;\r\n          if (sub && sub.gridstack) {\r\n            sub.gridstack.load((w.subGrid as GridStackOptions).children); // TODO: support updating grid options ?\r\n            this._insertNotAppend = true; // got reset by above call\r\n          }\r\n        }\r\n      } else if (addAndRemove) {\r\n        if (typeof(addAndRemove) === 'function') {\r\n          w = addAndRemove(this, w, true).gridstackNode;\r\n        } else {\r\n          w = this.addWidget(w).gridstackNode;\r\n        }\r\n      }\r\n    });\r\n\r\n    this.engine.removedNodes = removed;\r\n    this.batchUpdate(false);\r\n\r\n    // after commit, clear that flag\r\n    delete this._ignoreLayoutsNodeChange;\r\n    delete this._insertNotAppend;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * use before calling a bunch of `addWidget()` to prevent un-necessary relayouts in between (more efficient)\r\n   * and get a single event callback. You will see no changes until `batchUpdate(false)` is called.\r\n   */\r\n  public batchUpdate(flag = true): GridStack {\r\n    this.engine.batchUpdate(flag);\r\n    if (!flag) {\r\n      this._triggerRemoveEvent();\r\n      this._triggerAddEvent();\r\n      this._triggerChangeEvent();\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Gets current cell height.\r\n   */\r\n  public getCellHeight(forcePixel = false): number {\r\n    if (this.opts.cellHeight && this.opts.cellHeight !== 'auto' &&\r\n       (!forcePixel || !this.opts.cellHeightUnit || this.opts.cellHeightUnit === 'px')) {\r\n      return this.opts.cellHeight as number;\r\n    }\r\n    // else get first cell height\r\n    let el = this.el.querySelector('.' + this.opts.itemClass) as HTMLElement;\r\n    if (el) {\r\n      let height = Utils.toNumber(el.getAttribute('gs-h'));\r\n      return Math.round(el.offsetHeight / height);\r\n    }\r\n    // else do entire grid and # of rows (but doesn't work if min-height is the actual constrain)\r\n    let rows = parseInt(this.el.getAttribute('gs-current-row'));\r\n    return rows ? Math.round(this.el.getBoundingClientRect().height / rows) : this.opts.cellHeight as number;\r\n  }\r\n\r\n  /**\r\n   * Update current cell height - see `GridStackOptions.cellHeight` for format.\r\n   * This method rebuilds an internal CSS style sheet.\r\n   * Note: You can expect performance issues if call this method too often.\r\n   *\r\n   * @param val the cell height. If not passed (undefined), cells content will be made square (match width minus margin),\r\n   * if pass 0 the CSS will be generated by the application instead.\r\n   * @param update (Optional) if false, styles will not be updated\r\n   *\r\n   * @example\r\n   * grid.cellHeight(100); // same as 100px\r\n   * grid.cellHeight('70px');\r\n   * grid.cellHeight(grid.cellWidth() * 1.2);\r\n   */\r\n  public cellHeight(val?: numberOrString, update = true): GridStack {\r\n\r\n    // if not called internally, check if we're changing mode\r\n    if (update && val !== undefined) {\r\n      if (this._isAutoCellHeight !== (val === 'auto')) {\r\n        this._isAutoCellHeight = (val === 'auto');\r\n        this._updateWindowResizeEvent();\r\n      }\r\n    }\r\n    if (val === 'initial' || val === 'auto') { val = undefined; }\r\n\r\n    // make item content be square\r\n    if (val === undefined) {\r\n      let marginDiff = - (this.opts.marginRight as number) - (this.opts.marginLeft as number)\r\n        + (this.opts.marginTop as number) + (this.opts.marginBottom as number);\r\n      val = this.cellWidth() + marginDiff;\r\n    }\r\n\r\n    let data = Utils.parseHeight(val);\r\n    if (this.opts.cellHeightUnit === data.unit && this.opts.cellHeight === data.h) {\r\n      return this;\r\n    }\r\n    this.opts.cellHeightUnit = data.unit;\r\n    this.opts.cellHeight = data.h;\r\n\r\n    if (update) {\r\n      this._updateStyles(true, this.getRow()); // true = force re-create, for that # of rows\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** Gets current cell width. */\r\n  public cellWidth(): number {\r\n    return this._widthOrContainer() / this.getColumn();\r\n  }\r\n  /** return our expected width (or parent) for 1 column check */\r\n  protected _widthOrContainer(): number {\r\n    // use `offsetWidth` or `clientWidth` (no scrollbar) ?\r\n    // https://stackoverflow.com/questions/21064101/understanding-offsetwidth-clientwidth-scrollwidth-and-height-respectively\r\n    return (this.el.clientWidth || this.el.parentElement.clientWidth || window.innerWidth);\r\n  }\r\n\r\n  /** re-layout grid items to reclaim any empty space */\r\n  public compact(): GridStack {\r\n    this.engine.compact();\r\n    this._triggerChangeEvent();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * set the number of columns in the grid. Will update existing widgets to conform to new number of columns,\r\n   * as well as cache the original layout so you can revert back to previous positions without loss.\r\n   * Requires `gridstack-extra.css` or `gridstack-extra.min.css` for [2-11],\r\n   * else you will need to generate correct CSS (see https://github.com/gridstack/gridstack.js#change-grid-columns)\r\n   * @param column - Integer > 0 (default 12).\r\n   * @param layout specify the type of re-layout that will happen (position, size, etc...).\r\n   * Note: items will never be outside of the current column boundaries. default (moveScale). Ignored for 1 column\r\n   */\r\n  public column(column: number, layout: ColumnOptions = 'moveScale'): GridStack {\r\n    if (column < 1 || this.opts.column === column) return this;\r\n    let oldColumn = this.getColumn();\r\n\r\n    // if we go into 1 column mode (which happens if we're sized less than minW unless disableOneColumnMode is on)\r\n    // then remember the original columns so we can restore.\r\n    if (column === 1) {\r\n      this._prevColumn = oldColumn;\r\n    } else {\r\n      delete this._prevColumn;\r\n    }\r\n\r\n    this.el.classList.remove('grid-stack-' + oldColumn);\r\n    this.el.classList.add('grid-stack-' + column);\r\n    this.opts.column = this.engine.column = column;\r\n\r\n    // update the items now - see if the dom order nodes should be passed instead (else default to current list)\r\n    let domNodes: GridStackNode[];\r\n    if (column === 1 && this.opts.oneColumnModeDomSort) {\r\n      domNodes = [];\r\n      this.getGridItems().forEach(el => { // get dom elements in order\r\n        if (el.gridstackNode) { domNodes.push(el.gridstackNode); }\r\n      });\r\n      if (!domNodes.length) { domNodes = undefined; }\r\n    }\r\n    this.engine.updateNodeWidths(oldColumn, column, domNodes, layout);\r\n    if (this._isAutoCellHeight) this.cellHeight();\r\n\r\n    // and trigger our event last...\r\n    this._ignoreLayoutsNodeChange = true; // skip layout update\r\n    this._triggerChangeEvent();\r\n    delete this._ignoreLayoutsNodeChange;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * get the number of columns in the grid (default 12)\r\n   */\r\n  public getColumn(): number {\r\n    return this.opts.column as number;\r\n  }\r\n\r\n  /** returns an array of grid HTML elements (no placeholder) - used to iterate through our children in DOM order */\r\n  public getGridItems(): GridItemHTMLElement[] {\r\n    return Array.from(this.el.children)\r\n      .filter((el: HTMLElement) => el.matches('.' + this.opts.itemClass) && !el.matches('.' + this.opts.placeholderClass)) as GridItemHTMLElement[];\r\n  }\r\n\r\n  /**\r\n   * Destroys a grid instance. DO NOT CALL any methods or access any vars after this as it will free up members.\r\n   * @param removeDOM if `false` grid and items HTML elements will not be removed from the DOM (Optional. Default `true`).\r\n   */\r\n  public destroy(removeDOM = true): GridStack {\r\n    if (!this.el) return; // prevent multiple calls\r\n    this._updateWindowResizeEvent(true);\r\n    this.setStatic(true, false); // permanently removes DD but don't set CSS class (we're going away)\r\n    this.setAnimation(false);\r\n    if (!removeDOM) {\r\n      this.removeAll(removeDOM);\r\n      this.el.classList.remove(this.opts._styleSheetClass);\r\n    } else {\r\n      this.el.parentNode.removeChild(this.el);\r\n    }\r\n    this._removeStylesheet();\r\n    this.el.removeAttribute('gs-current-row');\r\n    delete this.opts._isNested;\r\n    delete this.opts;\r\n    delete this._placeholder;\r\n    delete this.engine;\r\n    delete this.el.gridstack; // remove circular dependency that would prevent a freeing\r\n    delete this.el;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * enable/disable floating widgets (default: `false`) See [example](http://gridstackjs.com/demo/float.html)\r\n   */\r\n  public float(val: boolean): GridStack {\r\n    this.engine.float = val;\r\n    this._triggerChangeEvent();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * get the current float mode\r\n   */\r\n  public getFloat(): boolean {\r\n    return this.engine.float;\r\n  }\r\n\r\n  /**\r\n   * Get the position of the cell under a pixel on screen.\r\n   * @param position the position of the pixel to resolve in\r\n   * absolute coordinates, as an object with top and left properties\r\n   * @param useDocRelative if true, value will be based on document position vs parent position (Optional. Default false).\r\n   * Useful when grid is within `position: relative` element\r\n   *\r\n   * Returns an object with properties `x` and `y` i.e. the column and row in the grid.\r\n   */\r\n  public getCellFromPixel(position: MousePosition, useDocRelative = false): CellPosition {\r\n    let box = this.el.getBoundingClientRect();\r\n    // console.log(`getBoundingClientRect left: ${box.left} top: ${box.top} w: ${box.w} h: ${box.h}`)\r\n    let containerPos: {top: number, left: number};\r\n    if (useDocRelative) {\r\n      containerPos = {top: box.top + document.documentElement.scrollTop, left: box.left};\r\n      // console.log(`getCellFromPixel scrollTop: ${document.documentElement.scrollTop}`)\r\n    } else {\r\n      containerPos = {top: this.el.offsetTop, left: this.el.offsetLeft}\r\n      // console.log(`getCellFromPixel offsetTop: ${containerPos.left} offsetLeft: ${containerPos.top}`)\r\n    }\r\n    let relativeLeft = position.left - containerPos.left;\r\n    let relativeTop = position.top - containerPos.top;\r\n\r\n    let columnWidth = (box.width / this.getColumn());\r\n    let rowHeight = (box.height / parseInt(this.el.getAttribute('gs-current-row')));\r\n\r\n    return {x: Math.floor(relativeLeft / columnWidth), y: Math.floor(relativeTop / rowHeight)};\r\n  }\r\n\r\n  /** returns the current number of rows, which will be at least `minRow` if set */\r\n  public getRow(): number {\r\n    return Math.max(this.engine.getRow(), this.opts.minRow);\r\n  }\r\n\r\n  /**\r\n   * Checks if specified area is empty.\r\n   * @param x the position x.\r\n   * @param y the position y.\r\n   * @param w the width of to check\r\n   * @param h the height of to check\r\n   */\r\n  public isAreaEmpty(x: number, y: number, w: number, h: number): boolean {\r\n    return this.engine.isAreaEmpty(x, y, w, h);\r\n  }\r\n\r\n  /**\r\n   * If you add elements to your grid by hand, you have to tell gridstack afterwards to make them widgets.\r\n   * If you want gridstack to add the elements for you, use `addWidget()` instead.\r\n   * Makes the given element a widget and returns it.\r\n   * @param els widget or single selector to convert.\r\n   *\r\n   * @example\r\n   * let grid = GridStack.init();\r\n   * grid.el.appendChild('<div id=\"gsi-1\" gs-w=\"3\"></div>');\r\n   * grid.makeWidget('#gsi-1');\r\n   */\r\n  public makeWidget(els: GridStackElement): GridItemHTMLElement {\r\n    let el = GridStack.getElement(els);\r\n    this._prepareElement(el, true);\r\n    this._updateContainerHeight();\r\n    this._triggerAddEvent();\r\n    this._triggerChangeEvent();\r\n    return el;\r\n  }\r\n\r\n  /**\r\n   * Event handler that extracts our CustomEvent data out automatically for receiving custom\r\n   * notifications (see doc for supported events)\r\n   * @param name of the event (see possible values) or list of names space separated\r\n   * @param callback function called with event and optional second/third param\r\n   * (see README documentation for each signature).\r\n   *\r\n   * @example\r\n   * grid.on('added', function(e, items) { log('added ', items)} );\r\n   * or\r\n   * grid.on('added removed change', function(e, items) { log(e.type, items)} );\r\n   *\r\n   * Note: in some cases it is the same as calling native handler and parsing the event.\r\n   * grid.el.addEventListener('added', function(event) { log('added ', event.detail)} );\r\n   *\r\n   */\r\n  public on(name: GridStackEvent, callback: GridStackEventHandlerCallback): GridStack {\r\n    // check for array of names being passed instead\r\n    if (name.indexOf(' ') !== -1) {\r\n      let names = name.split(' ') as GridStackEvent[];\r\n      names.forEach(name => this.on(name, callback));\r\n      return this;\r\n    }\r\n\r\n    if (name === 'change' || name === 'added' || name === 'removed' || name === 'enable' || name === 'disable') {\r\n      // native CustomEvent handlers - cash the generic handlers so we can easily remove\r\n      let noData = (name === 'enable' || name === 'disable');\r\n      if (noData) {\r\n        this._gsEventHandler[name] = (event: Event) => callback(event);\r\n      } else {\r\n        this._gsEventHandler[name] = (event: CustomEvent) => callback(event, event.detail);\r\n      }\r\n      this.el.addEventListener(name, this._gsEventHandler[name]);\r\n    } else if (name === 'drag' || name === 'dragstart' || name === 'dragstop' || name === 'resizestart' || name === 'resize' || name === 'resizestop' || name === 'dropped') {\r\n      // drag&drop stop events NEED to be call them AFTER we update node attributes so handle them ourself.\r\n      // do same for start event to make it easier...\r\n      this._gsEventHandler[name] = callback;\r\n    } else {\r\n      console.log('GridStack.on(' + name + ') event not supported, but you can still use $(\".grid-stack\").on(...) while jquery-ui is still used internally.');\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * unsubscribe from the 'on' event below\r\n   * @param name of the event (see possible values)\r\n   */\r\n  public off(name: GridStackEvent): GridStack {\r\n    // check for array of names being passed instead\r\n    if (name.indexOf(' ') !== -1) {\r\n      let names = name.split(' ') as GridStackEvent[];\r\n      names.forEach(name => this.off(name));\r\n      return this;\r\n    }\r\n\r\n    if (name === 'change' || name === 'added' || name === 'removed' || name === 'enable' || name === 'disable') {\r\n      // remove native CustomEvent handlers\r\n      if (this._gsEventHandler[name]) {\r\n        this.el.removeEventListener(name, this._gsEventHandler[name]);\r\n      }\r\n    }\r\n    delete this._gsEventHandler[name];\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes widget from the grid.\r\n   * @param el  widget or selector to modify\r\n   * @param removeDOM if `false` DOM element won't be removed from the tree (Default? true).\r\n   * @param triggerEvent if `false` (quiet mode) element will not be added to removed list and no 'removed' callbacks will be called (Default? true).\r\n   */\r\n  public removeWidget(els: GridStackElement, removeDOM = true, triggerEvent = true): GridStack {\r\n    GridStack.getElements(els).forEach(el => {\r\n      if (el.parentElement !== this.el) return; // not our child!\r\n      let node = el.gridstackNode;\r\n      // For Meteor support: https://github.com/gridstack/gridstack.js/pull/272\r\n      if (!node) {\r\n        node = this.engine.nodes.find(n => el === n.el);\r\n      }\r\n      if (!node) return;\r\n\r\n      // remove our DOM data (circular link) and drag&drop permanently\r\n      delete el.gridstackNode;\r\n      this._removeDD(el);\r\n\r\n      this.engine.removeNode(node, removeDOM, triggerEvent);\r\n\r\n      if (removeDOM && el.parentElement) {\r\n        el.remove(); // in batch mode engine.removeNode doesn't call back to remove DOM\r\n      }\r\n    });\r\n    if (triggerEvent) {\r\n      this._triggerRemoveEvent();\r\n      this._triggerChangeEvent();\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes all widgets from the grid.\r\n   * @param removeDOM if `false` DOM elements won't be removed from the tree (Default? `true`).\r\n   */\r\n  public removeAll(removeDOM = true): GridStack {\r\n    // always remove our DOM data (circular link) before list gets emptied and drag&drop permanently\r\n    this.engine.nodes.forEach(n => {\r\n      delete n.el.gridstackNode;\r\n      this._removeDD(n.el);\r\n    });\r\n    this.engine.removeAll(removeDOM);\r\n    this._triggerRemoveEvent();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Toggle the grid animation state.  Toggles the `grid-stack-animate` class.\r\n   * @param doAnimate if true the grid will animate.\r\n   */\r\n  public setAnimation(doAnimate: boolean): GridStack {\r\n    if (doAnimate) {\r\n      this.el.classList.add('grid-stack-animate');\r\n    } else {\r\n      this.el.classList.remove('grid-stack-animate');\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Toggle the grid static state, which permanently removes/add Drag&Drop support, unlike disable()/enable() that just turns it off/on.\r\n   * Also toggle the grid-stack-static class.\r\n   * @param val if true the grid become static.\r\n   */\r\n  public setStatic(val: boolean, updateClass = true): GridStack {\r\n    if (this.opts.staticGrid === val) return this;\r\n    this.opts.staticGrid = val;\r\n    this._setupRemoveDrop();\r\n    this._setupAcceptWidget();\r\n    this.engine.nodes.forEach(n => this._prepareDragDropByNode(n)); // either delete or init Drag&drop\r\n    if (updateClass) { this._setStaticClass(); }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Updates widget position/size and other info. Note: if you need to call this on all nodes, use load() instead which will update what changed.\r\n   * @param els  widget or selector of objects to modify (note: setting the same x,y for multiple items will be indeterministic and likely unwanted)\r\n   * @param opt new widget options (x,y,w,h, etc..). Only those set will be updated.\r\n   */\r\n  public update(els: GridStackElement, opt: GridStackWidget): GridStack {\r\n\r\n    // support legacy call for now ?\r\n    if (arguments.length > 2) {\r\n      console.warn('gridstack.ts: `update(el, x, y, w, h)` is deprecated. Use `update(el, {x, w, content, ...})`. It will be removed soon');\r\n      // eslint-disable-next-line prefer-rest-params\r\n      let a = arguments, i = 1;\r\n      opt = { x:a[i++], y:a[i++], w:a[i++], h:a[i++] };\r\n      return this.update(els, opt);\r\n    }\r\n\r\n    GridStack.getElements(els).forEach(el => {\r\n      if (!el || !el.gridstackNode) return;\r\n      let n = el.gridstackNode;\r\n      let w = Utils.cloneDeep(opt); // make a copy we can modify in case they re-use it or multiple items\r\n      delete w.autoPosition;\r\n\r\n      // move/resize widget if anything changed\r\n      let keys = ['x', 'y', 'w', 'h'];\r\n      let m: GridStackWidget;\r\n      if (keys.some(k => w[k] !== undefined && w[k] !== n[k])) {\r\n        m = {};\r\n        keys.forEach(k => {\r\n          m[k] = (w[k] !== undefined) ? w[k] : n[k];\r\n          delete w[k];\r\n        });\r\n      }\r\n      // for a move as well IFF there is any min/max fields set\r\n      if (!m && (w.minW || w.minH || w.maxW || w.maxH)) {\r\n        m = {}; // will use node position but validate values\r\n      }\r\n\r\n      // check for content changing\r\n      if (w.content) {\r\n        let sub = el.querySelector('.grid-stack-item-content');\r\n        if (sub && sub.innerHTML !== w.content) {\r\n          sub.innerHTML = w.content;\r\n        }\r\n        delete w.content;\r\n      }\r\n\r\n      // any remaining fields are assigned, but check for dragging changes, resize constrain\r\n      let changed = false;\r\n      let ddChanged = false;\r\n      for (const key in w) {\r\n        if (key[0] !== '_' && n[key] !== w[key]) {\r\n          n[key] = w[key];\r\n          changed = true;\r\n          ddChanged = ddChanged || (!this.opts.staticGrid && (key === 'noResize' || key === 'noMove' || key === 'locked'));\r\n        }\r\n      }\r\n\r\n      // finally move the widget\r\n      if (m) {\r\n        this.engine.cleanNodes()\r\n          .beginUpdate(n)\r\n          .moveNode(n, m);\r\n        this._updateContainerHeight();\r\n        this._triggerChangeEvent();\r\n        this.engine.endUpdate();\r\n      }\r\n      if (changed) { // move will only update x,y,w,h so update the rest too\r\n        this._writeAttr(el, n);\r\n      }\r\n      if (ddChanged) {\r\n        this._prepareDragDropByNode(n);\r\n      }\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Updates the margins which will set all 4 sides at once - see `GridStackOptions.margin` for format options (CSS string format of 1,2,4 values or single number).\r\n   * @param value margin value\r\n   */\r\n  public margin(value: numberOrString): GridStack {\r\n    let isMultiValue = (typeof value === 'string' && value.split(' ').length > 1);\r\n    // check if we can skip re-creating our CSS file... won't check if multi values (too much hassle)\r\n    if (!isMultiValue) {\r\n      let data = Utils.parseHeight(value);\r\n      if (this.opts.marginUnit === data.unit && this.opts.margin === data.h) return;\r\n    }\r\n    // re-use existing margin handling\r\n    this.opts.margin = value;\r\n    this.opts.marginTop = this.opts.marginBottom = this.opts.marginLeft = this.opts.marginRight = undefined;\r\n    this._initMargin();\r\n\r\n    this._updateStyles(true); // true = force re-create\r\n\r\n    return this;\r\n  }\r\n\r\n  /** returns current margin number value (undefined if 4 sides don't match) */\r\n  public getMargin(): number { return this.opts.margin as number; }\r\n\r\n  /**\r\n   * Returns true if the height of the grid will be less than the vertical\r\n   * constraint. Always returns true if grid doesn't have height constraint.\r\n   * @param node contains x,y,w,h,auto-position options\r\n   *\r\n   * @example\r\n   * if (grid.willItFit(newWidget)) {\r\n   *   grid.addWidget(newWidget);\r\n   * } else {\r\n   *   alert('Not enough free space to place the widget');\r\n   * }\r\n   */\r\n  public willItFit(node: GridStackWidget): boolean {\r\n    // support legacy call for now\r\n    if (arguments.length > 1) {\r\n      console.warn('gridstack.ts: `willItFit(x,y,w,h,autoPosition)` is deprecated. Use `willItFit({x, y,...})`. It will be removed soon');\r\n      // eslint-disable-next-line prefer-rest-params\r\n      let a = arguments, i = 0,\r\n        w: GridStackWidget = { x:a[i++], y:a[i++], w:a[i++], h:a[i++], autoPosition:a[i++] };\r\n      return this.willItFit(w);\r\n    }\r\n    return this.engine.willItFit(node);\r\n  }\r\n\r\n  /** @internal */\r\n  protected _triggerChangeEvent(): GridStack {\r\n    if (this.engine.batchMode) return this;\r\n    let elements = this.engine.getDirtyNodes(true); // verify they really changed\r\n    if (elements && elements.length) {\r\n      if (!this._ignoreLayoutsNodeChange) {\r\n        this.engine.layoutsNodesChange(elements);\r\n      }\r\n      this._triggerEvent('change', elements);\r\n    }\r\n    this.engine.saveInitial(); // we called, now reset initial values & dirty flags\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  protected _triggerAddEvent(): GridStack {\r\n    if (this.engine.batchMode) return this;\r\n    if (this.engine.addedNodes && this.engine.addedNodes.length > 0) {\r\n      if (!this._ignoreLayoutsNodeChange) {\r\n        this.engine.layoutsNodesChange(this.engine.addedNodes);\r\n      }\r\n      // prevent added nodes from also triggering 'change' event (which is called next)\r\n      this.engine.addedNodes.forEach(n => { delete n._dirty; });\r\n      this._triggerEvent('added', this.engine.addedNodes);\r\n      this.engine.addedNodes = [];\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  public _triggerRemoveEvent(): GridStack {\r\n    if (this.engine.batchMode) return this;\r\n    if (this.engine.removedNodes && this.engine.removedNodes.length > 0) {\r\n      this._triggerEvent('removed', this.engine.removedNodes);\r\n      this.engine.removedNodes = [];\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  protected _triggerEvent(name: string, data?: GridStackNode[]): GridStack {\r\n    let event = data ? new CustomEvent(name, {bubbles: false, detail: data}) : new Event(name);\r\n    this.el.dispatchEvent(event);\r\n    return this;\r\n  }\r\n\r\n  /** @internal called to delete the current dynamic style sheet used for our layout */\r\n  protected _removeStylesheet(): GridStack {\r\n\r\n    if (this._styles) {\r\n      Utils.removeStylesheet(this._styles._id);\r\n      delete this._styles;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal updated/create the CSS styles for row based layout and initial margin setting */\r\n  protected _updateStyles(forceUpdate = false, maxH?: number): GridStack {\r\n    // call to delete existing one if we change cellHeight / margin\r\n    if (forceUpdate) {\r\n      this._removeStylesheet();\r\n    }\r\n\r\n    this._updateContainerHeight();\r\n\r\n    // if user is telling us they will handle the CSS themselves by setting heights to 0. Do we need this opts really ??\r\n    if (this.opts.cellHeight === 0) {\r\n      return this;\r\n    }\r\n\r\n    let cellHeight = this.opts.cellHeight as number;\r\n    let cellHeightUnit = this.opts.cellHeightUnit;\r\n    let prefix = `.${this.opts._styleSheetClass} > .${this.opts.itemClass}`;\r\n\r\n    // create one as needed\r\n    if (!this._styles) {\r\n      let id = 'gridstack-style-' + (Math.random() * 100000).toFixed();\r\n      // insert style to parent (instead of 'head' by default) to support WebComponent\r\n      let styleLocation = this.opts.styleInHead ? undefined : this.el.parentNode as HTMLElement;\r\n      this._styles = Utils.createStylesheet(id, styleLocation);\r\n      if (!this._styles) return this;\r\n      this._styles._id = id;\r\n      this._styles._max = 0;\r\n\r\n      // these are done once only\r\n      Utils.addCSSRule(this._styles, prefix, `min-height: ${cellHeight}${cellHeightUnit}`);\r\n      // content margins\r\n      let top: string = this.opts.marginTop + this.opts.marginUnit;\r\n      let bottom: string = this.opts.marginBottom + this.opts.marginUnit;\r\n      let right: string = this.opts.marginRight + this.opts.marginUnit;\r\n      let left: string = this.opts.marginLeft + this.opts.marginUnit;\r\n      let content = `${prefix} > .grid-stack-item-content`;\r\n      let placeholder = `.${this.opts._styleSheetClass} > .grid-stack-placeholder > .placeholder-content`;\r\n      Utils.addCSSRule(this._styles, content, `top: ${top}; right: ${right}; bottom: ${bottom}; left: ${left};`);\r\n      Utils.addCSSRule(this._styles, placeholder, `top: ${top}; right: ${right}; bottom: ${bottom}; left: ${left};`);\r\n      // resize handles offset (to match margin)\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-ne`, `right: ${right}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-e`, `right: ${right}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-se`, `right: ${right}; bottom: ${bottom}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-nw`, `left: ${left}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-w`, `left: ${left}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-sw`, `left: ${left}; bottom: ${bottom}`);\r\n    }\r\n\r\n    // now update the height specific fields\r\n    maxH = maxH || this._styles._max;\r\n    if (maxH > this._styles._max) {\r\n      let getHeight = (rows: number): string => (cellHeight * rows) + cellHeightUnit;\r\n      for (let i = this._styles._max + 1; i <= maxH; i++) { // start at 1\r\n        let h: string = getHeight(i);\r\n        Utils.addCSSRule(this._styles, `${prefix}[gs-y=\"${i-1}\"]`,   `top: ${getHeight(i-1)}`); // start at 0\r\n        Utils.addCSSRule(this._styles, `${prefix}[gs-h=\"${i}\"]`,     `height: ${h}`);\r\n        Utils.addCSSRule(this._styles, `${prefix}[gs-min-h=\"${i}\"]`, `min-height: ${h}`);\r\n        Utils.addCSSRule(this._styles, `${prefix}[gs-max-h=\"${i}\"]`, `max-height: ${h}`);\r\n      }\r\n      this._styles._max = maxH;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  protected _updateContainerHeight(): GridStack {\r\n    if (!this.engine || this.engine.batchMode) return this;\r\n    let row = this.getRow() + this._extraDragRow; // checks for minRow already\r\n    // check for css min height\r\n    // Note: we don't handle %,rem correctly so comment out, beside we don't need need to create un-necessary\r\n    // rows as the CSS will make us bigger than our set height if needed... not sure why we had this.\r\n    // let cssMinHeight = parseInt(getComputedStyle(this.el)['min-height']);\r\n    // if (cssMinHeight > 0) {\r\n    //   let minRow = Math.round(cssMinHeight / this.getCellHeight(true));\r\n    //   if (row < minRow) {\r\n    //     row = minRow;\r\n    //   }\r\n    // }\r\n    this.el.setAttribute('gs-current-row', String(row));\r\n    if (row === 0) {\r\n      this.el.style.removeProperty('height');\r\n      return this;\r\n    }\r\n    let cellHeight = this.opts.cellHeight as number;\r\n    let unit = this.opts.cellHeightUnit;\r\n    if (!cellHeight) return this;\r\n    this.el.style.height = row * cellHeight + unit;\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  protected _prepareElement(el: GridItemHTMLElement, triggerAddEvent = false, node?: GridStackNode): GridStack {\r\n    if (!node) {\r\n      el.classList.add(this.opts.itemClass);\r\n      node = this._readAttr(el);\r\n    }\r\n    el.gridstackNode = node;\r\n    node.el = el;\r\n    node.grid = this;\r\n    let copy = {...node};\r\n    node = this.engine.addNode(node, triggerAddEvent);\r\n    // write node attr back in case there was collision or we have to fix bad values during addNode()\r\n    if (!Utils.same(node, copy)) {\r\n      this._writeAttr(el, node);\r\n    }\r\n    this._prepareDragDropByNode(node);\r\n    return this;\r\n  }\r\n\r\n  /** @internal call to write position x,y,w,h attributes back to element */\r\n  protected _writePosAttr(el: HTMLElement, n: GridStackPosition): GridStack {\r\n    if (n.x !== undefined && n.x !== null) { el.setAttribute('gs-x', String(n.x)); }\r\n    if (n.y !== undefined && n.y !== null) { el.setAttribute('gs-y', String(n.y)); }\r\n    if (n.w) { el.setAttribute('gs-w', String(n.w)); }\r\n    if (n.h) { el.setAttribute('gs-h', String(n.h)); }\r\n    return this;\r\n  }\r\n\r\n  /** @internal call to write any default attributes back to element */\r\n  protected _writeAttr(el: HTMLElement, node: GridStackWidget): GridStack {\r\n    if (!node) return this;\r\n    this._writePosAttr(el, node);\r\n\r\n    let attrs /*: GridStackWidget but strings */ = { // remaining attributes\r\n      autoPosition: 'gs-auto-position',\r\n      minW: 'gs-min-w',\r\n      minH: 'gs-min-h',\r\n      maxW: 'gs-max-w',\r\n      maxH: 'gs-max-h',\r\n      noResize: 'gs-no-resize',\r\n      noMove: 'gs-no-move',\r\n      locked: 'gs-locked',\r\n      id: 'gs-id',\r\n      resizeHandles: 'gs-resize-handles'\r\n    };\r\n    for (const key in attrs) {\r\n      if (node[key]) { // 0 is valid for x,y only but done above already and not in list anyway\r\n        el.setAttribute(attrs[key], String(node[key]));\r\n      } else {\r\n        el.removeAttribute(attrs[key]);\r\n      }\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal call to read any default attributes from element */\r\n  protected _readAttr(el: HTMLElement): GridStackWidget {\r\n    let node: GridStackNode = {};\r\n    node.x = Utils.toNumber(el.getAttribute('gs-x'));\r\n    node.y = Utils.toNumber(el.getAttribute('gs-y'));\r\n    node.w = Utils.toNumber(el.getAttribute('gs-w'));\r\n    node.h = Utils.toNumber(el.getAttribute('gs-h'));\r\n    node.maxW = Utils.toNumber(el.getAttribute('gs-max-w'));\r\n    node.minW = Utils.toNumber(el.getAttribute('gs-min-w'));\r\n    node.maxH = Utils.toNumber(el.getAttribute('gs-max-h'));\r\n    node.minH = Utils.toNumber(el.getAttribute('gs-min-h'));\r\n    node.autoPosition = Utils.toBool(el.getAttribute('gs-auto-position'));\r\n    node.noResize = Utils.toBool(el.getAttribute('gs-no-resize'));\r\n    node.noMove = Utils.toBool(el.getAttribute('gs-no-move'));\r\n    node.locked = Utils.toBool(el.getAttribute('gs-locked'));\r\n    node.resizeHandles = el.getAttribute('gs-resize-handles');\r\n    node.id = el.getAttribute('gs-id');\r\n\r\n    // remove any key not found (null or false which is default)\r\n    for (const key in node) {\r\n      if (!node.hasOwnProperty(key)) return;\r\n      if (!node[key] && node[key] !== 0) { // 0 can be valid value (x,y only really)\r\n        delete node[key];\r\n      }\r\n    }\r\n\r\n    return node;\r\n  }\r\n\r\n  /** @internal */\r\n  protected _setStaticClass(): GridStack {\r\n    let classes = ['grid-stack-static'];\r\n\r\n    if (this.opts.staticGrid) {\r\n      this.el.classList.add(...classes);\r\n      this.el.setAttribute('gs-static', 'true');\r\n    } else {\r\n      this.el.classList.remove(...classes);\r\n      this.el.removeAttribute('gs-static');\r\n\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * called when we are being resized by the window - check if the one Column Mode needs to be turned on/off\r\n   * and remember the prev columns we used, or get our count from parent, as well as check for auto cell height (square)\r\n   */\r\n  public onParentResize(): GridStack {\r\n    if (!this.el || !this.el.clientWidth) return; // return if we're gone or no size yet (will get called again)\r\n    let changedColumn = false;\r\n\r\n    // see if we're nested and take our column count from our parent....\r\n    if (this._autoColumn && this.opts._isNested) {\r\n      if (this.opts.column !== this.opts._isNested.w) {\r\n        changedColumn = true;\r\n        this.column(this.opts._isNested.w, 'none');\r\n      }\r\n    } else {\r\n      // else check for 1 column in/out behavior\r\n      let oneColumn = !this.opts.disableOneColumnMode && this.el.clientWidth <= this.opts.oneColumnSize;\r\n      if ((this.opts.column === 1) !== oneColumn) {\r\n        changedColumn = true;\r\n        if (this.opts.animate) { this.setAnimation(false); } // 1 <-> 12 is too radical, turn off animation\r\n        this.column(oneColumn ? 1 : this._prevColumn);\r\n        if (this.opts.animate) { this.setAnimation(true); }\r\n      }\r\n    }\r\n\r\n    // make the cells content square again\r\n    if (this._isAutoCellHeight) {\r\n      if (!changedColumn && this.opts.cellHeightThrottle) {\r\n        if (!this._cellHeightThrottle) {\r\n          this._cellHeightThrottle = Utils.throttle(() => this.cellHeight(), this.opts.cellHeightThrottle);\r\n        }\r\n        this._cellHeightThrottle();\r\n      } else {\r\n        // immediate update if we've changed column count or have no threshold\r\n        this.cellHeight();\r\n      }\r\n    }\r\n\r\n    // finally update any nested grids\r\n    this.engine.nodes.forEach(n => {\r\n      if (n.subGrid) {(n.subGrid as GridStack).onParentResize()}\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /** add or remove the window size event handler */\r\n  protected _updateWindowResizeEvent(forceRemove = false): GridStack {\r\n    // only add event if we're not nested (parent will call us) and we're auto sizing cells or supporting oneColumn (i.e. doing work)\r\n    const workTodo = (this._isAutoCellHeight || !this.opts.disableOneColumnMode) && !this.opts._isNested;\r\n\r\n    if (!forceRemove && workTodo && !this._windowResizeBind) {\r\n      this._windowResizeBind = this.onParentResize.bind(this); // so we can properly remove later\r\n      window.addEventListener('resize', this._windowResizeBind);\r\n    } else if ((forceRemove || !workTodo) && this._windowResizeBind) {\r\n      window.removeEventListener('resize', this._windowResizeBind);\r\n      delete this._windowResizeBind; // remove link to us so we can free\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /** @internal convert a potential selector into actual element */\r\n  public static getElement(els: GridStackElement = '.grid-stack-item'): GridItemHTMLElement { return Utils.getElement(els) }\r\n  /** @internal */\r\n  public static getElements(els: GridStackElement = '.grid-stack-item'): GridItemHTMLElement[] { return Utils.getElements(els) }\r\n  /** @internal */\r\n  public static getGridElement(els: GridStackElement): GridHTMLElement { return GridStack.getElement(els) }\r\n  /** @internal */\r\n  public static getGridElements(els: string): GridHTMLElement[] { return Utils.getElements(els) }\r\n\r\n  /** @internal initialize margin top/bottom/left/right and units */\r\n  protected _initMargin(): GridStack {\r\n\r\n    let data: HeightData;\r\n    let margin = 0;\r\n\r\n    // support passing multiple values like CSS (ex: '5px 10px 0 20px')\r\n    let margins: string[] = [];\r\n    if (typeof this.opts.margin === 'string') {\r\n      margins = this.opts.margin.split(' ')\r\n    }\r\n    if (margins.length === 2) { // top/bot, left/right like CSS\r\n      this.opts.marginTop = this.opts.marginBottom = margins[0];\r\n      this.opts.marginLeft = this.opts.marginRight = margins[1];\r\n    } else if (margins.length === 4) { // Clockwise like CSS\r\n      this.opts.marginTop = margins[0];\r\n      this.opts.marginRight = margins[1];\r\n      this.opts.marginBottom = margins[2];\r\n      this.opts.marginLeft = margins[3];\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.margin);\r\n      this.opts.marginUnit = data.unit;\r\n      margin = this.opts.margin = data.h;\r\n    }\r\n\r\n    // see if top/bottom/left/right need to be set as well\r\n    if (this.opts.marginTop === undefined) {\r\n      this.opts.marginTop = margin;\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.marginTop);\r\n      this.opts.marginTop = data.h;\r\n      delete this.opts.margin;\r\n    }\r\n\r\n    if (this.opts.marginBottom === undefined) {\r\n      this.opts.marginBottom = margin;\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.marginBottom);\r\n      this.opts.marginBottom = data.h;\r\n      delete this.opts.margin;\r\n    }\r\n\r\n    if (this.opts.marginRight === undefined) {\r\n      this.opts.marginRight = margin;\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.marginRight);\r\n      this.opts.marginRight = data.h;\r\n      delete this.opts.margin;\r\n    }\r\n\r\n    if (this.opts.marginLeft === undefined) {\r\n      this.opts.marginLeft = margin;\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.marginLeft);\r\n      this.opts.marginLeft = data.h;\r\n      delete this.opts.margin;\r\n    }\r\n    this.opts.marginUnit = data.unit; // in case side were spelled out, use those units instead...\r\n    if (this.opts.marginTop === this.opts.marginBottom && this.opts.marginLeft === this.opts.marginRight && this.opts.marginTop === this.opts.marginRight) {\r\n      this.opts.margin = this.opts.marginTop; // makes it easier to check for no-ops in setMargin()\r\n    }\r\n    return this;\r\n  }\r\n\r\n  static GDRev = '6.0.1';\r\n\r\n  /*\r\n   * drag&drop empty stubs that will be implemented in dd-gridstack.ts for non static grid\r\n   * so we don't incur the load unless needed.\r\n   * NOTE: had to make those methods public in order to define them else as\r\n   *   GridStack.prototype._setupAcceptWidget = function()\r\n   * maybe there is a better way ????\r\n   */\r\n  /* eslint-disable @typescript-eslint/no-unused-vars */\r\n\r\n  /**\r\n   * call to setup dragging in from the outside (say toolbar), by specifying the class selection and options.\r\n   * Called during GridStack.init() as options, but can also be called directly (last param are cached) in case the toolbar\r\n   * is dynamically create and needs to change later.\r\n   * @param dragIn string selector (ex: '.sidebar .grid-stack-item')\r\n   * @param dragInOptions options - see DDDragInOpt. (default: {handle: '.grid-stack-item-content', appendTo: 'body'}\r\n   **/\r\n  public static setupDragIn(dragIn?: string, dragInOptions?: DDDragInOpt): void { /* implemented in dd-gridstack.ts */ }\r\n\r\n  /**\r\n   * Enables/Disables dragging by the user of specific grid element. If you want all items, and have it affect future items, use enableMove() instead. No-op for static grids.\r\n   * IF you are looking to prevent an item from moving (due to being pushed around by another during collision) use locked property instead.\r\n   * @param els widget or selector to modify.\r\n   * @param val if true widget will be draggable.\r\n   */\r\n  public movable(els: GridStackElement, val: boolean): GridStack { return this }\r\n  /**\r\n   * Enables/Disables user resizing of specific grid element. If you want all items, and have it affect future items, use enableResize() instead. No-op for static grids.\r\n   * @param els  widget or selector to modify\r\n   * @param val  if true widget will be resizable.\r\n   */\r\n  public resizable(els: GridStackElement, val: boolean): GridStack { return this }\r\n  /**\r\n   * Temporarily disables widgets moving/resizing.\r\n   * If you want a more permanent way (which freezes up resources) use `setStatic(true)` instead.\r\n   * Note: no-op for static grid\r\n   * This is a shortcut for:\r\n   * @example\r\n   *  grid.enableMove(false);\r\n   *  grid.enableResize(false);\r\n   */\r\n  public disable(): GridStack { return this }\r\n  /**\r\n   * Re-enables widgets moving/resizing - see disable().\r\n   * Note: no-op for static grid.\r\n   * This is a shortcut for:\r\n   * @example\r\n   *  grid.enableMove(true);\r\n   *  grid.enableResize(true);\r\n   */\r\n  public enable(): GridStack { return this }\r\n  /**\r\n   * Enables/disables widget moving. No-op for static grids.\r\n   */\r\n  public enableMove(doEnable: boolean): GridStack { return this }\r\n  /**\r\n   * Enables/disables widget resizing. No-op for static grids.\r\n   */\r\n  public enableResize(doEnable: boolean): GridStack { return this }\r\n\r\n  /** @internal removes any drag&drop present (called during destroy) */\r\n  public _removeDD(el: GridItemHTMLElement): GridStack { return this }\r\n  /** @internal called to add drag over support to support widgets */\r\n  public _setupAcceptWidget(): GridStack { return this }\r\n  /** @internal called to setup a trash drop zone if the user specifies it */\r\n  public _setupRemoveDrop(): GridStack { return this }\r\n  /** @internal prepares the element for drag&drop **/\r\n  public _prepareDragDropByNode(node: GridStackNode): GridStack { return this }\r\n  /** @internal handles actual drag/resize start **/\r\n  public _onStartMoving(el: GridItemHTMLElement, event: Event, ui: DDUIData, node: GridStackNode, cellWidth: number, cellHeight: number): void { return }\r\n  /** @internal handles actual drag/resize **/\r\n  public _dragOrResize(el: GridItemHTMLElement, event: Event, ui: DDUIData, node: GridStackNode, cellWidth: number, cellHeight: number): void { return }\r\n  /** @internal called when a node leaves our area (mouse out or shape outside) **/\r\n  public _leave(el: GridItemHTMLElement, helper?: GridItemHTMLElement): void { return }\r\n  // legacy method removed\r\n  public commit(): GridStack { obsolete(this, this.batchUpdate(false), 'commit', 'batchUpdate', '5.2'); return this; }\r\n}\r\n\r\n/*\r\n * and include D&D by default, which override some methods here\r\n * TODO: while we can generate a gridstack-static.js at smaller size - saves about 31k (41k -> 72k)\r\n * I don't know how to generate the DD only code at the remaining 31k to delay load as code depends on Gridstack.ts\r\n */\r\nimport { DDGridStack } from './dd-gridstack';\r\nimport { isTouch } from './dd-touch';\r\nexport * from './dd-gridstack';\r\n","/**\r\n * utils.ts 6.0.1\r\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\r\n */\r\n\r\nimport { GridStackElement, GridStackNode, GridStackOptions, numberOrString, GridStackPosition, GridStackWidget } from './types';\r\n\r\nexport interface HeightData {\r\n  h: number;\r\n  unit: string;\r\n}\r\n\r\n/** checks for obsolete method names */\r\n// eslint-disable-next-line\r\nexport function obsolete(self, f, oldName: string, newName: string, rev: string): (...args: any[]) => any {\r\n  let wrapper = (...args) => {\r\n    console.warn('gridstack.js: Function `' + oldName + '` is deprecated in ' + rev + ' and has been replaced ' +\r\n    'with `' + newName + '`. It will be **removed** in a future release');\r\n    return f.apply(self, args);\r\n  }\r\n  wrapper.prototype = f.prototype;\r\n  return wrapper;\r\n}\r\n\r\n/** checks for obsolete grid options (can be used for any fields, but msg is about options) */\r\nexport function obsoleteOpts(opts: GridStackOptions, oldName: string, newName: string, rev: string): void {\r\n  if (opts[oldName] !== undefined) {\r\n    opts[newName] = opts[oldName];\r\n    console.warn('gridstack.js: Option `' + oldName + '` is deprecated in ' + rev + ' and has been replaced with `' +\r\n      newName + '`. It will be **removed** in a future release');\r\n  }\r\n}\r\n\r\n/** checks for obsolete grid options which are gone */\r\nexport function obsoleteOptsDel(opts: GridStackOptions, oldName: string, rev: string, info: string): void {\r\n  if (opts[oldName] !== undefined) {\r\n    console.warn('gridstack.js: Option `' + oldName + '` is deprecated in ' + rev + info);\r\n  }\r\n}\r\n\r\n/** checks for obsolete Jquery element attributes */\r\nexport function obsoleteAttr(el: HTMLElement, oldName: string, newName: string, rev: string): void {\r\n  let oldAttr = el.getAttribute(oldName);\r\n  if (oldAttr !== null) {\r\n    el.setAttribute(newName, oldAttr);\r\n    console.warn('gridstack.js: attribute `' + oldName + '`=' + oldAttr + ' is deprecated on this object in ' + rev + ' and has been replaced with `' +\r\n      newName + '`. It will be **removed** in a future release');\r\n  }\r\n}\r\n\r\n/**\r\n * Utility methods\r\n */\r\nexport class Utils {\r\n\r\n  /** convert a potential selector into actual list of html elements */\r\n  static getElements(els: GridStackElement): HTMLElement[] {\r\n    if (typeof els === 'string') {\r\n      let list = document.querySelectorAll(els);\r\n      if (!list.length && els[0] !== '.' && els[0] !== '#') {\r\n        list = document.querySelectorAll('.' + els);\r\n        if (!list.length) { list = document.querySelectorAll('#' + els) }\r\n      }\r\n      return Array.from(list) as HTMLElement[];\r\n    }\r\n    return [els];\r\n  }\r\n\r\n  /** convert a potential selector into actual single element */\r\n  static getElement(els: GridStackElement): HTMLElement {\r\n    if (typeof els === 'string') {\r\n      if (!els.length) return null;\r\n      if (els[0] === '#') {\r\n        return document.getElementById(els.substring(1));\r\n      }\r\n      if (els[0] === '.' || els[0] === '[') {\r\n        return document.querySelector(els);\r\n      }\r\n\r\n      // if we start with a digit, assume it's an id (error calling querySelector('#1')) as class are not valid CSS\r\n      if(!isNaN(+els[0])) { // start with digit\r\n        return document.getElementById(els);\r\n      }\r\n\r\n      // finally try string, then id then class\r\n      let el = document.querySelector(els);\r\n      if (!el) { el = document.getElementById(els) }\r\n      if (!el) { el = document.querySelector('.' + els) }\r\n      return el as HTMLElement;\r\n    }\r\n    return els;\r\n  }\r\n\r\n  /** returns true if a and b overlap */\r\n  static isIntercepted(a: GridStackPosition, b: GridStackPosition): boolean {\r\n    return !(a.y >= b.y + b.h || a.y + a.h <= b.y || a.x + a.w <= b.x || a.x >= b.x + b.w);\r\n  }\r\n\r\n  /** returns true if a and b touch edges or corners */\r\n  static isTouching(a: GridStackPosition, b: GridStackPosition): boolean {\r\n    return Utils.isIntercepted(a, {x: b.x-0.5, y: b.y-0.5, w: b.w+1, h: b.h+1})\r\n  }\r\n  /**\r\n   * Sorts array of nodes\r\n   * @param nodes array to sort\r\n   * @param dir 1 for asc, -1 for desc (optional)\r\n   * @param width width of the grid. If undefined the width will be calculated automatically (optional).\r\n   **/\r\n  static sort(nodes: GridStackNode[], dir?: -1 | 1, column?: number): GridStackNode[] {\r\n    column = column || nodes.reduce((col, n) => Math.max(n.x + n.w, col), 0) || 12;\r\n    if (dir === -1)\r\n      return nodes.sort((a, b) => (b.x + b.y * column)-(a.x + a.y * column));\r\n    else\r\n      return nodes.sort((b, a) => (b.x + b.y * column)-(a.x + a.y * column));\r\n  }\r\n\r\n  /**\r\n   * creates a style sheet with style id under given parent\r\n   * @param id will set the 'gs-style-id' attribute to that id\r\n   * @param parent to insert the stylesheet as first child,\r\n   * if none supplied it will be appended to the document head instead.\r\n   */\r\n  static createStylesheet(id: string, parent?: HTMLElement): CSSStyleSheet {\r\n    let style: HTMLStyleElement = document.createElement('style');\r\n    style.setAttribute('type', 'text/css');\r\n    style.setAttribute('gs-style-id', id);\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    if ((style as any).styleSheet) { // TODO: only CSSImportRule have that and different beast ??\r\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n      (style as any).styleSheet.cssText = '';\r\n    } else {\r\n      style.appendChild(document.createTextNode('')); // WebKit hack\r\n    }\r\n    if (!parent) {\r\n      // default to head\r\n      parent = document.getElementsByTagName('head')[0];\r\n      parent.appendChild(style);\r\n    } else {\r\n      parent.insertBefore(style, parent.firstChild);\r\n    }\r\n    return style.sheet as CSSStyleSheet;\r\n  }\r\n\r\n  /** removed the given stylesheet id */\r\n  static removeStylesheet(id: string): void {\r\n    let el = document.querySelector('STYLE[gs-style-id=' + id + ']');\r\n    if (el && el.parentNode) el.remove();\r\n  }\r\n\r\n  /** inserts a CSS rule */\r\n  static addCSSRule(sheet: CSSStyleSheet, selector: string, rules: string): void {\r\n    if (typeof sheet.addRule === 'function') {\r\n      sheet.addRule(selector, rules);\r\n    } else if (typeof sheet.insertRule === 'function') {\r\n      sheet.insertRule(`${selector}{${rules}}`);\r\n    }\r\n  }\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  static toBool(v: unknown): boolean {\r\n    if (typeof v === 'boolean') {\r\n      return v;\r\n    }\r\n    if (typeof v === 'string') {\r\n      v = v.toLowerCase();\r\n      return !(v === '' || v === 'no' || v === 'false' || v === '0');\r\n    }\r\n    return Boolean(v);\r\n  }\r\n\r\n  static toNumber(value: null | string): number {\r\n    return (value === null || value.length === 0) ? undefined : Number(value);\r\n  }\r\n\r\n  static parseHeight(val: numberOrString): HeightData {\r\n    let h: number;\r\n    let unit = 'px';\r\n    if (typeof val === 'string') {\r\n      let match = val.match(/^(-[0-9]+\\.[0-9]+|[0-9]*\\.[0-9]+|-[0-9]+|[0-9]+)(px|em|rem|vh|vw|%)?$/);\r\n      if (!match) {\r\n        throw new Error('Invalid height');\r\n      }\r\n      unit = match[2] || 'px';\r\n      h = parseFloat(match[1]);\r\n    } else {\r\n      h = val;\r\n    }\r\n    return { h, unit };\r\n  }\r\n\r\n  /** copies unset fields in target to use the given default sources values */\r\n  // eslint-disable-next-line\r\n  static defaults(target, ...sources): {} {\r\n\r\n    sources.forEach(source => {\r\n      for (const key in source) {\r\n        if (!source.hasOwnProperty(key)) return;\r\n        if (target[key] === null || target[key] === undefined) {\r\n          target[key] = source[key];\r\n        } else if (typeof source[key] === 'object' && typeof target[key] === 'object') {\r\n          // property is an object, recursively add it's field over... #1373\r\n          this.defaults(target[key], source[key]);\r\n        }\r\n      }\r\n    });\r\n\r\n    return target;\r\n  }\r\n\r\n  /** given 2 objects return true if they have the same values. Checks for Object {} having same fields and values (just 1 level down) */\r\n  static same(a: unknown, b: unknown): boolean {\r\n    if (typeof a !== 'object')  return a == b;\r\n    if (typeof a !== typeof b) return false;\r\n    // else we have object, check just 1 level deep for being same things...\r\n    if (Object.keys(a).length !== Object.keys(b).length) return false;\r\n    for (const key in a) {\r\n      if (a[key] !== b[key]) return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /** copies over b size & position (GridStackPosition), and possibly min/max as well */\r\n  static copyPos(a: GridStackWidget, b: GridStackWidget, doMinMax = false): GridStackWidget {\r\n    a.x = b.x;\r\n    a.y = b.y;\r\n    a.w = b.w;\r\n    a.h = b.h;\r\n    if (doMinMax) {\r\n      if (b.minW) a.minW = b.minW;\r\n      if (b.minH) a.minH = b.minH;\r\n      if (b.maxW) a.maxW = b.maxW;\r\n      if (b.maxH) a.maxH = b.maxH;\r\n    }\r\n    return a;\r\n  }\r\n\r\n  /** true if a and b has same size & position */\r\n  static samePos(a: GridStackPosition, b: GridStackPosition): boolean {\r\n    return a && b && a.x === b.x && a.y === b.y && a.w === b.w && a.h === b.h;\r\n  }\r\n\r\n  /** removes field from the first object if same as the second objects (like diffing) and internal '_' for saving */\r\n  static removeInternalAndSame(a: unknown, b: unknown):void {\r\n    if (typeof a !== 'object' || typeof b !== 'object') return;\r\n    for (let key in a) {\r\n      let val = a[key];\r\n      if (key[0] === '_' || val === b[key]) {\r\n        delete a[key]\r\n      } else if (val && typeof val === 'object' && b[key] !== undefined) {\r\n        for (let i in val) {\r\n          if (val[i] === b[key][i] || i[0] === '_') { delete val[i] }\r\n        }\r\n        if (!Object.keys(val).length) { delete a[key] }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** return the closest parent (or itself) matching the given class */\r\n  static closestByClass(el: HTMLElement, name: string): HTMLElement {\r\n    while (el) {\r\n      if (el.classList.contains(name)) return el;\r\n      el = el.parentElement\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** delay calling the given function for given delay, preventing new calls from happening while waiting */\r\n  static throttle(func: () => void, delay: number): () => void {\r\n    let isWaiting = false;\r\n    return (...args) => {\r\n      if (!isWaiting) {\r\n        isWaiting = true;\r\n        setTimeout(() => { func(...args); isWaiting = false; }, delay);\r\n      }\r\n    }\r\n  }\r\n\r\n  static removePositioningStyles(el: HTMLElement): void {\r\n    let style = el.style;\r\n    if (style.position) {\r\n      style.removeProperty('position');\r\n    }\r\n    if (style.left) {\r\n      style.removeProperty('left');\r\n    }\r\n    if (style.top) {\r\n      style.removeProperty('top');\r\n    }\r\n    if (style.width) {\r\n      style.removeProperty('width');\r\n    }\r\n    if (style.height) {\r\n      style.removeProperty('height');\r\n    }\r\n  }\r\n\r\n  /** @internal returns the passed element if scrollable, else the closest parent that will, up to the entire document scrolling element */\r\n  static getScrollElement(el?: HTMLElement): HTMLElement {\r\n    if (!el) return document.scrollingElement as HTMLElement || document.documentElement; // IE support\r\n    const style = getComputedStyle(el);\r\n    const overflowRegex = /(auto|scroll)/;\r\n\r\n    if (overflowRegex.test(style.overflow + style.overflowY)) {\r\n      return el;\r\n    } else {\r\n      return this.getScrollElement(el.parentElement);\r\n    }\r\n  }\r\n\r\n  /** @internal */\r\n  static updateScrollPosition(el: HTMLElement, position: {top: number}, distance: number): void {\r\n    // is widget in view?\r\n    let rect = el.getBoundingClientRect();\r\n    let innerHeightOrClientHeight = (window.innerHeight || document.documentElement.clientHeight);\r\n    if (rect.top < 0 ||\r\n      rect.bottom > innerHeightOrClientHeight\r\n    ) {\r\n      // set scrollTop of first parent that scrolls\r\n      // if parent is larger than el, set as low as possible\r\n      // to get entire widget on screen\r\n      let offsetDiffDown = rect.bottom - innerHeightOrClientHeight;\r\n      let offsetDiffUp = rect.top;\r\n      let scrollEl = this.getScrollElement(el);\r\n      if (scrollEl !== null) {\r\n        let prevScroll = scrollEl.scrollTop;\r\n        if (rect.top < 0 && distance < 0) {\r\n          // moving up\r\n          if (el.offsetHeight > innerHeightOrClientHeight) {\r\n            scrollEl.scrollTop += distance;\r\n          } else {\r\n            scrollEl.scrollTop += Math.abs(offsetDiffUp) > Math.abs(distance) ? distance : offsetDiffUp;\r\n          }\r\n        } else if (distance > 0) {\r\n          // moving down\r\n          if (el.offsetHeight > innerHeightOrClientHeight) {\r\n            scrollEl.scrollTop += distance;\r\n          } else {\r\n            scrollEl.scrollTop += offsetDiffDown > distance ? distance : offsetDiffDown;\r\n          }\r\n        }\r\n        // move widget y by amount scrolled\r\n        position.top += scrollEl.scrollTop - prevScroll;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @internal Function used to scroll the page.\r\n   *\r\n   * @param event `MouseEvent` that triggers the resize\r\n   * @param el `HTMLElement` that's being resized\r\n   * @param distance Distance from the V edges to start scrolling\r\n   */\r\n  static updateScrollResize(event: MouseEvent, el: HTMLElement, distance: number): void {\r\n    const scrollEl = this.getScrollElement(el);\r\n    const height = scrollEl.clientHeight;\r\n    // #1727 event.clientY is relative to viewport, so must compare this against position of scrollEl getBoundingClientRect().top\r\n    // #1745 Special situation if scrollEl is document 'html': here browser spec states that\r\n    // clientHeight is height of viewport, but getBoundingClientRect() is rectangle of html element;\r\n    // this discrepancy arises because in reality scrollbar is attached to viewport, not html element itself.\r\n    const offsetTop = (scrollEl === this.getScrollElement()) ? 0 : scrollEl.getBoundingClientRect().top;\r\n    const pointerPosY = event.clientY - offsetTop;\r\n    const top = pointerPosY < distance;\r\n    const bottom = pointerPosY > height - distance;\r\n\r\n    if (top) {\r\n      // This also can be done with a timeout to keep scrolling while the mouse is\r\n      // in the scrolling zone. (will have smoother behavior)\r\n      scrollEl.scrollBy({ behavior: 'smooth', top: pointerPosY - distance});\r\n    } else if (bottom) {\r\n      scrollEl.scrollBy({ behavior: 'smooth', top: distance - (height - pointerPosY)});\r\n    }\r\n  }\r\n\r\n  /** single level clone, returning a new object with same top fields. This will share sub objects and arrays */\r\n  static clone<T>(obj: T): T {\r\n    if (obj === null || obj === undefined || typeof(obj) !== 'object') {\r\n      return obj;\r\n    }\r\n    // return Object.assign({}, obj);\r\n    if (obj instanceof Array) {\r\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n      return [...obj] as any;\r\n    }\r\n    return {...obj};\r\n  }\r\n\r\n  /**\r\n   * Recursive clone version that returns a full copy, checking for nested objects and arrays ONLY.\r\n   * Note: this will use as-is any key starting with double __ (and not copy inside) some lib have circular dependencies.\r\n   */\r\n  static cloneDeep<T>(obj: T): T {\r\n    // list of fields we will skip during cloneDeep (nested objects, other internal)\r\n    const skipFields = ['_isNested', 'el', 'grid', 'subGrid', 'engine'];\r\n    // return JSON.parse(JSON.stringify(obj)); // doesn't work with date format ?\r\n    const ret = Utils.clone(obj);\r\n    for (const key in ret) {\r\n      // NOTE: we don't support function/circular dependencies so skip those properties for now...\r\n      if (ret.hasOwnProperty(key) && typeof(ret[key]) === 'object' && key.substring(0, 2) !== '__' && !skipFields.find(k => k === key)) {\r\n        ret[key] = Utils.cloneDeep(obj[key]);\r\n      }\r\n    }\r\n    return ret;\r\n  }\r\n\r\n  /** deep clone the given HTML node, removing teh unique id field */\r\n  public static cloneNode(el: HTMLElement): HTMLElement {\r\n    const node = el.cloneNode(true) as HTMLElement;\r\n    node.removeAttribute('id');\r\n    return node;\r\n  }\r\n\r\n  public static appendTo(el: HTMLElement, parent: string | HTMLElement | Node): void {\r\n    let parentNode: HTMLElement;\r\n    if (typeof parent === 'string') {\r\n      parentNode = document.querySelector(parent as string);\r\n    } else {\r\n      parentNode = parent as HTMLElement;\r\n    }\r\n    if (parentNode) {\r\n      parentNode.appendChild(el);\r\n    }\r\n  }\r\n\r\n  // public static setPositionRelative(el: HTMLElement): void {\r\n  //   if (!(/^(?:r|a|f)/).test(window.getComputedStyle(el).position)) {\r\n  //     el.style.position = \"relative\";\r\n  //   }\r\n  // }\r\n\r\n  public static addElStyles(el: HTMLElement, styles: { [prop: string]: string | string[] }): void {\r\n    if (styles instanceof Object) {\r\n      for (const s in styles) {\r\n        if (styles.hasOwnProperty(s)) {\r\n          if (Array.isArray(styles[s])) {\r\n            // support fallback value\r\n            (styles[s] as string[]).forEach(val => {\r\n              el.style[s] = val;\r\n            });\r\n          } else {\r\n            el.style[s] = styles[s];\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public static initEvent<T>(e: DragEvent | MouseEvent, info: { type: string; target?: EventTarget }): T {\r\n    const evt = { type: info.type };\r\n    const obj = {\r\n      button: 0,\r\n      which: 0,\r\n      buttons: 1,\r\n      bubbles: true,\r\n      cancelable: true,\r\n      target: info.target ? info.target : e.target\r\n    };\r\n    // don't check for `instanceof DragEvent` as Safari use MouseEvent #1540\r\n    if ((e as DragEvent).dataTransfer) {\r\n      evt['dataTransfer'] = (e as DragEvent).dataTransfer; // workaround 'readonly' field.\r\n    }\r\n    ['altKey','ctrlKey','metaKey','shiftKey'].forEach(p => evt[p] = e[p]); // keys\r\n    ['pageX','pageY','clientX','clientY','screenX','screenY'].forEach(p => evt[p] = e[p]); // point info\r\n    return {...evt, ...obj} as unknown as T;\r\n  }\r\n\r\n  /** returns true if event is inside the given element rectangle */\r\n  // Note: Safari Mac has null event.relatedTarget which causes #1684 so check if DragEvent is inside the coordinates instead\r\n  //    this.el.contains(event.relatedTarget as HTMLElement)\r\n  // public static inside(e: MouseEvent, el: HTMLElement): boolean {\r\n  //   // srcElement, toElement, target: all set to placeholder when leaving simple grid, so we can't use that (Chrome)\r\n  //   let target: HTMLElement = e.relatedTarget || (e as any).fromElement;\r\n  //   if (!target) {\r\n  //     const { bottom, left, right, top } = el.getBoundingClientRect();\r\n  //     return (e.x < right && e.x > left && e.y < bottom && e.y > top);\r\n  //   }\r\n  //   return el.contains(target);\r\n  // }\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(324);\n"],"sourceRoot":""}